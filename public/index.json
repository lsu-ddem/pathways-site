[
{
	"uri": "/3_audio/3_soundsinbugsquish/1_lesson_1/",
	"title": "Adding Sound Events to Games: Sound File Playback",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4_physicalcomputing/arduino-setup/",
	"title": "Arduino Setup",
	"tags": [],
	"description": "",
	"content": "Arduino must first be setup on your computer.\nhttps://create.arduino.cc/projecthub/Arduino_Genuino/getting-started-with-arduino-web-editor-on-various-platforms-4b3e4a?f=1\n Install Arduino Create Agent for your Browser https://github.com/arduino/arduino-create-agent Load Basics: Blink Choose your Board upload the sketch  Once this works, you are ready to go forward.\n"
},
{
	"uri": "/2_graphics/1_proceduraldrawing/1_lesson_1/",
	"title": "Basic &amp; Advanced Shapes",
	"tags": [],
	"description": "",
	"content": "Drawing Basic Shapes p5.js allows us to create basic shapes with the use of the following functions:\n ellipse( ) - circles, ovals rect( ) - rectangles, squares triangle( ) - all triangles arc( ) - portions of circles/ovals  Each shape function requires a different set of arguments to be added when called. Typically, the first two arguments dictate the X and Y coordinate of a point of the shape\u0026rsquo;s placement on the canvas, while the following arguments dictate the shapes size:\n ellipse(X location of the shape\u0026rsquo;s center, Y location of the shape\u0026rsquo;s center, Diameter (Total Width of the shape), Diameter (Total Height of the shape)  A perfect circle would use the same number for the third and fourth arguments.   rect(X location of the shape\u0026rsquo;s upper lefthand point, Y location of the shape\u0026rsquo;s upper lefthand point, Total Width of the shape, Total Height of the shape)  Since the shape is placed on the canvas by it\u0026rsquo;s upper lefthand corner, the location of the other corners of the square can be determined by the numbers used for the third and fourth arguments.  Example: calling rect(50, 50, 100, 100) would have the upper lefthand corner located at 50 X \u0026amp; 50 Y, and the upper righthand corner at 150 X \u0026amp; 50 Y, and the lower righthand corner at 150 X \u0026amp; 150 Y.   A perfect square would use the same number for the third and fourth argument.   triangle(X location of the shape\u0026rsquo;s first point, Y location of the shape\u0026rsquo;s first point, X location of the shape\u0026rsquo;s second point, Y location of the shape\u0026rsquo;s second point, X location of the shape\u0026rsquo;s third point, Y location of the shape\u0026rsquo;s third point)  Unlike ellipses and rectangles, p5.js draws triangles based on the coordinates of all three of the shape\u0026rsquo;s corner points. You can place these point coordinate pairs in any order you\u0026rsquo;d like, but it is best to image drawing the shape on the canvas moving from left to right or right to left in order to keep track of the point coordinates in your head.   arc(X location of the shape\u0026rsquo;s center, Y location of the shape\u0026rsquo;s center, Total Width of the shape, Total Height of the shape, Start of the arc\u0026rsquo;s perimeter, Stop of the arc\u0026rsquo;s perimeter)  The first four arguments are the same as those used to create an ellipse. The fifth argument states where to start drawing the outer perimeter of the circle. p5.js draws the perimeter counterclockwise, and the sixth argument tells the function at what point to stop drawing the perimeter. Be default, p5.js requires radians (PI, QUARTER_PI, etc.) to be used for the fifth and sixth arguments of arc( ) but it is a bit easier to use degrees (0-360). In order to use degrees instead, call angleMode(DEGREES)before calling your arc( )function and p5.js will convert the fifth and sixth arguments properly.  Example: calling arc(120, 15, 60, 60, 90, 270) draws a half circle split vertically, with its center located at 120 X \u0026amp; 15 Y, 60 pixels wide and 60 pixels tall (if the entire circle was drawn), with a perimeter that starts at 90 degrees and extends counterclockwise stopping at 270 degrees.   By default, arcs are left \u0026ldquo;open\u0026rdquo; when drawn. To add a stroke outline to the flat edges of an arc, add the word PIE as a seventh argument to the arc()function.    An example of these four basic shapes can be found in the code below. Try changing some of the arguments to see how this modifies the shape\u0026rsquo;s location or appearance:\nOutlines (Stroke weight and Stroke Color) p5 draws shapes with a thin black outline by default. This outline is called the stroke, and it can be modified in a number of ways.\nThe stroke() function changes the color of any shapes drawn after it is called. It can take either a String or RGB color values as arguments, similar to the fill() function.\nThe thickness of a shape\u0026rsquo;s stroke can be set with the strokeWeight() function. It takes a single argument that sets the thickness in units of pixels.\nTo remove an outline from a shape entirely, use the noStroke() function.\nThe following code adds changeable stroke color and stroke weight to the same shapes from the previous code. Try adding the noStroke() to see its effect:\nDrawing Custom Shapes We can create complex images by overlapping basic shapes, but we can also design our our shapes by connecting multiple vertices together. To do this, we first call the beginShape()function, then one vertex() function with a pair of X \u0026amp; Y coordinates for the location of each angle point of our shape. Finally, we call the endShape() function to designate that we have completed our design. Similar to the triangle() function, p5 draws connects the coordinates in our vertex() functions in the order in which we code them, so take extra care to have a plan in place for working in a clockwise or counterclockwise order or you will have stroke outlines bisecting your finished shape.\nLike the arc() function, the final line segment of our custom shape is left \u0026ldquo;open\u0026rdquo;. To add a final stroke and \u0026ldquo;close\u0026rdquo; the shape, we can add the word CLOSE as an argument in the endShape() function.\nThe following code shows two custom shapes drawn using the beginShape(), endShape(), vertex(), procedure:\n"
},
{
	"uri": "/6_resources/1_basicjavascript/",
	"title": "Basic Javascript",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/3_audio/2_synthsandmusic/2_lesson_2/buildingasequence/",
	"title": "Building a sequence",
	"tags": [],
	"description": "",
	"content": "Sequencing notes To use any sequencing functions Tone.Transport() must be started.\nParameters  start stop toggle - go between start and stop seconds - get current position in seconds position - get beats:bars:sixteens bpm - beats per minute  Examples Understanding Sequences Modifying a Sequence During Performance Removing and Replacing Patterns in the Same Sequence "
},
{
	"uri": "/1_introtocoding/3_reuseitwithmodularcode/1_lesson_1/",
	"title": "Code that does a thing - functions",
	"tags": [],
	"description": "",
	"content": "How Functions Work So far throughout this course we have been utilizing various functions such as setup(), draw(), ellipse(), etc. You may have noticed a few things in common between each of these.\nFunctions cals are indicated by the function name followed by a set of parentheses; such as background(). At their core, functions can take in certain values and utilize them to perform a task, or return a new value. The arguments that we have been typing into a function’s parentheses are examples of these values. For example, fill(255,100,100) takes the numbers given and generates a specific color that is used to fill in anything drawn to the canvas until those values change with a new fill() call.\nKnowing this, we can develop our own custom functions that perform a specific task whenever we call them, but why would we want to do this? Look at the code below and see how many lines it takes to draw one single ghost in that spot on the canvas. Imagine if you wanted to have multiple ghosts, ghosts that looked slightly different, or ghosts that move around the screen. How many lines would that simple-looking project take? How many lines would be almost identical? How problematic would it be if you needed to change one small thing in that block of code?\nThe answer to the problems posed by these questions can be answered with the idea of modular code and custom functions. As previously mentioned, functions can take in an argument and give an output based on those arguments. In the next several codes we are going to create a function that generates ghosts with unique behaviors.\nLook at this code; what is different from the previous code? You will notice that a lot of the same code is present, but now it is located inside of a new function. We have made a custom function that creates ghosts based on the arguments we give it.\nMaking a Function To create a function, follow these general steps:\n  Use the identifier “function”, and give your function a unique name (note that you cannot have 2 functions with identical names)\n  Inside the parentheses, give a name for each argument that your function needs. These will act like variables in the code to follow, and be replaced with number when we use the function.\n  Place the code you want your function to execute inside of the braces. Be sure to use the names for your arguments when needed. (In the previous code example, we have an argument for any parameter that we want to be able to change with our ghosts)\n  Now you can call your function inside of draw(). Notice how this happens twice in the previous code, and two different ghosts appear. This is because the first call happens with one set of arguments, and the second happens with a new set. Each function call is independent, like when you called rect() multiple times to create multiple rectangles on the canvas.\n  Functions with a return When making a function, you can have it return a value to be used elsewhere in your code.\nLook at the code below; the array ghostColorz[ ] is calling the function randomColorz() multiple times. If you look at function randomColors(), you can see that whenever it is called it generates three random colors and returns the array. What does this mean?\nWhen a function has a return, it means that it will execute its code, and then give back a value. This can be something generated entirely within the function, like in this example, or based on the input of an argument. When a function returns a value, the function call is replaced by the value that is returned. So in this example, calling randomColorz() results in a series of arrays used to determine the colors of the ghosts.\nOne thing to note is that a return should be the last thing inside of a function. THis is because once the computer returns a value, the function will stop running until it is called again, at which point it will start from the top. This means that any code beneath the return will be ignored by the computer which would be a waste of code and computer memory in the best case, and cause multiple errors at the worst.\n"
},
{
	"uri": "/1_introtocoding/1_codingbasics/",
	"title": "Coding Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Elements of a Web Project Each web project that we design is composed of a collection of files that come together to create our interactive art work. When creating these files locally on your computer, you should store them all in the same folder. When working in code editing apps such as VS Code, you will often have quick access to all files that are grouped within the same folder in case you need to change or update code across multiple files. When working in online code editors such as CodePen or the P5.js Web Editor, creating a new File or Pen from the main menu results in the automatic creation of a project folder filled with HTML, CSS and JavaScript files (the P5 Web Editor provides some starter code for you in all three files).\nTake a look at the HTML, JS, and CSS tabs in the embedded CodePen sketch below to learn more about what each of these files should contain:\nHTML file The HTML file in your project is read by your web browser and rendered into readable text, visuals, and audio. Each web project we create in this course will require the minimum code that you see in this example. While we won\u0026rsquo;t dive too deep into coding practices for HTML, lets take a look at what these vital lines of code do:\n Inside of the head element, we include script tags that link us to the code libraries that we\u0026rsquo;ll use as dependencies for our JavaScript file. This will allow the code we write in our JavaScript file to work properly and create the interactive audiovisuals we design. When working with p5.js, it\u0026rsquo;s necessary to include a link to the main p5 library and suggested to include a link to the p5.dom library (which allows us to create user-friendly buttons, sliders, and other common website features in our projects). If you\u0026rsquo;re working in the p5 Web Editor, each project you create will automatically include links to these two libraries and an additional p5.sound library (we will replace this with the Tone.js library in future lessons). Inside of the body element, we place any code that will form the primary audiovisual elements of our project. For this course, we will be writing this code inside of its own file named \u0026ldquo;sketch.js\u0026rdquo;, so we simply need to call to it here in our HTML file using another script tag.  CSS file CSS stands for \u0026ldquo;Cascading Style Sheets\u0026rdquo;, and is code that describes and controls the layouts of the HTML elements we code for in our \u0026ldquo;index.html\u0026rdquo; file. We will not be focusing much on editing and designing code for our CSS files throughout this course, so the CSS portion of every project we create can be extremely simplistic:\nhtml, body: { margin: 0; padding: 0; } The preceding CSS code states that any visual elements found in the body element of our HTML file will be rendered in our browser with no added margin or padding around them. In many cases, a \u0026ldquo;style.css\u0026rdquo; file is not needed for our projects to run properly. When working in the p5 Web Editor, a CSS file is automatically created for each new project.\nJavaScript File This file contains the bulk of the code that creates results in our project. We will be working primarily inside of this file, as it will be loaded into our web browser through our HTML file and rendered by your web browser. In this example, our JS file contains just enough code to allow the p5 library to create a blank, gray canvas, which can be seen in the \u0026ldquo;Result\u0026rdquo; tab.\nWhen working in the p5 Web Editor, every new project you create will inherently name this file \u0026ldquo;sketch.js\u0026rdquo;. You can rename this file to be anything you\u0026rsquo;d like, but if you do, you will need to also update that filename in the body element of your accompanying HTML file. When creating and hosting files locally on your computer, you\u0026rsquo;ll want to be careful to not store multiple, different JavaScript files inside of the same project folder if they all share the same generic name. Doing so will cause your browser to be unable to render the proper JavaScript file, and your project won\u0026rsquo;t run.\nData Types Throughout our projects, we will be using a variety of different data types in our code. Here is a quick explanation of common data types used in JavaScript:\n Number: a value represented by numerical digits. Numbers can be floats or integers. Large numbers over three digits should not include a comma as they normally would in the written word (e.g. 1,000 should be 1000 in your code). String: a value represented by text and characters (including spaces), commonly enclosed in a pair of quotation marks (e.g. \u0026ldquo;blue\u0026rdquo;, \u0026ldquo;duckling\u0026rdquo;, \u0026ldquo;Type Any Word Here!\u0026rdquo; Boolean: a logical entity represented through the states of true or false.  Coding with Proper Syntax When coding in a text-based language such as JavaScript, it\u0026rsquo;s important to follow some basic rules of syntax so that your computer can properly render your project without errors. In many cases, an error will cause your entire project to not work, or at the very least, large portions of it. Learning to follow some simple techniques from the start will help cut down on time spent debugging and troubleshooting:\n Symbols such as braces—{ , [ ,—and parenthesis are always used in pairs. Open and closed braces and parenthesis are used to enclose data that is being used for a specific purpose, and forgetting to match open and closed symbols can lead to common errors. For example: in the embedded code above, the phrase createCanvas() is followed by a pair of parenthesis containing a set of numbers. If we edited that line of code and removed one of those parenthesis, our browser or code editor would give us an error in our Console (more on this below), and the code would not run beyond that line. Capitalization is crucial when coding, and words/phrases must use the same capitalization when they are used more than once. For instance, the words \u0026ldquo;pecan\u0026rdquo; and \u0026ldquo;Pecan\u0026rdquo; are close enough to be understood as the same entity when reading them in this sentence, but to a computer, they are considered to be two completely different things. If the word \u0026ldquo;pecan\u0026rdquo;, starting with a lower case \u0026ldquo;p\u0026rdquo;, is used to represent something crucial in your code, you will need to type it exactly the same way each time you need to reference it. Good code includes comments or short explanations of any complex elements involved so that others can learn from your work. This is also helpful to keep track of how your code works so that you can pinpoint exact lines or sections that may need to be fixed. To leave comments in your JS file, add two / symbols before the comment you want to type:  //Here is a comment. This is only readable by you, not the browser Longer comments that span multiple lines can be made like this:\n/* Here is a multi-line comment. Neat! */ Using the Console The console is a section of your code editor or browser that can be used when you want to get information on aspects of your code, or you want to see a log of any and all errors that have occurred in your project. You can also use the console to communicate with your code while it is running, which is helpful for checking on the current state of variables, the current color of shapes and objects, or to even double check that functions or events you designed are working properly.\nClick on the \u0026ldquo;Edit on CodePen\u0026rdquo; title on the embedded code below to see a few examples of how you can ask your code to log info to your browser\u0026rsquo;s console. To ask your code to log something to the console, use the console.log() function, and place whatever you want to be logged inside of the parenthesis. Our example below logs the current mouseX position if you click on the screen, the sum of a mathematical equation, and the contents of a variable called phrase1. You can also try typing into the console to get information back. Try typing circleColor or newPhrase and see what you get when you hit enter.\n"
},
{
	"uri": "/1_introtocoding/2_makingthings_happen/1_lesson_1/",
	"title": "Computers Making Choices - Conditionals",
	"tags": [],
	"description": "",
	"content": "Creating a Test Computers are extremely powerful machines, but without our help, they cannot make choices and decisions on their own. In order to make our web projects smarter and more interactive, we need to first learn how to design tests and reactions that computers can understand.\nA Conditional is a statement that tells our code to perform certain actions based on whether a test we devised has been passed or failed. All conditionals will contain both a test and a result. Our daily lives are filled with conditional statements that dictate what we can do and when we can do it. For example, if the weather is nice, then we can go outside, otherwise we need to stay indoors and wait for the weather to clear. In this instance, the test is a check to see if the weather conditions are safe enough for us to head outdoors, and the result is either us leaving the house to play outside, or more repeats of the test.\nMost of our tests in web programing will boil down to measuring boolean conditions, which can be one of two possible values: true or false. We can design tests that measure a certain condition and only allow us to pass that test if the condition is either met (true) or not met (false). This is extremely common for conditionals that test to see if a user has interacted with your project through mouse clicks or keyboard presses, since those two objects can only produce two different states: clicked/pressed or unclicked/unpressed.\nWe can also design tests that compare the relationship between two values and only pass based on what that relationship is. The chart below lists some common relational expressions (many of which you may have encounter in math class) and the symbols we use in JavaScript to add them into our code:\nCommon relational expressions\n   Operator Expression     \u0026gt; Greater than   \u0026lt; Less than   == Equal to   \u0026gt;= Greater than or equal to   \u0026lt;= Less than or equal to   != Not equal to    We might need to make tests that ask for more than one condition to be measured at a time, allowing the test to pass only if both conditions are met or if either one or more options listed are met. In these cases, we can chain conditions together with the \u0026amp;\u0026amp; operator (which stands for \u0026ldquo;and\u0026rdquo;) or use the || operator (which stands for \u0026ldquo;or\u0026rdquo;) to allow for two passable options for a single test:\nCommon logic expressions\n   Operator Expression     \u0026amp;\u0026amp; and   || or    Let\u0026rsquo;s take a look at some common conditional statements and see how we code them into our projects.\nSingle Test, Single Result (The If Statement) The most commonly-used conditional is called the If Statement, and it is comprised of a single test (which could be made up of many sub-conditionals linked together with and or or operators) and a single result. Logically, an If Statement acts like the diagram below: if we pass the test, we get to run any code we designate as the result; if we fail the test, we continue to take the test until we pass it. The rest of our code outside of our If Statement continues to run as normal:\ngraph TD A{Test} --|True| B(Code In Result Block) B-- C A{Test} --|False| C(Code After Conditional) style A fill:#00ffff, stroke:#FFFFFF; style B fill: #00ffff, stroke:#FFFFFF; style C fill:#FFFFFF, stroke:#FFFFFF;  Translated into code, an If Statement looks like this:\nif (test) { result } Pay close attention to the various symbols in the code example above. Every Conditional statement will include a keyword(s), a pair of parenthesis, and a pair of braces ( { } ). The code inside of those symbols is extremely important: the tests that make up the conditional must always go inside of the parenthesis. Any code that we want to run as the result of passing the test (whether it be one line or one thousand lines) must be contained inside of the { } brackets. A good way to remember this separation of test code and result code is to imagine playing a video game where the sole purpose is to enter a locked room to reach a treasure. In the scenario, the locked door and barrier keeping you from the treasure is any test code placed inside the parenthesis. The treasure itself is any result code placed inside of the brackets:\nThe embedded code below shows an If Statement in action. Clicking and dragging your mouse along the gray canvas draws lines made of teal squares. The test measures the mouseIsPressed system variable from our previous lesson and waits to see if it contains the boolean value \u0026ldquo;true.\u0026rdquo; If it does, a teal square is produced by running the two lines of code found inside of the braces. If it doesn\u0026rsquo;t, the test continues to check and wait to see when it will be passed because we have placed it inside of the draw( ) loop. The code outside of the If Statement continues to run regardless:\nSingle Test, Two Results (The If/Else Statement) A more advanced conditional statement is the If/Else Statement. This statement is comprised of a single test just like the If statement, but we have two different results that can occur: one for passing the test and one for failing the test. This is similar to receiving a conciliation prize after attempting to win the grand prize. Logically, the IF/Else statement acts like the diagram below: if we pass the test, we get to run any code we designate as the result, else we run any code designated as a secondary result. When we fail the test, we continue to take the test until we pass it and continue to run the secondary result code. The rest of our code outside of our If/Else Statement continues to run as normal:\ngraph TD A{Test} --|True| B(Result Block 1) A{Test} --|False| D(Result Block 2) B--E(Code After Conditional) D--E style A fill:#00ffff, stroke:#FFFFFF; style B fill:#00ffff, stroke:#FFFFFF; style D fill:#00ffff, stroke:#FFFFFF; style E fill:#FFFFFF, stroke:#FFFFFF;  Translated into code, an If/Else statement looks like this:\nif (test) { result 1 } else { result 2 } Notice how similar this looks to our If Statement. The only difference is the addition of a second keyword (else), another pair of brackets, and any code we want to act as the secondary result code, located within the second pair of brackets. Using our video game analogy from before, the second pair of brackets is similar to a new, blue room that we are sent to only if we try to enter our green-barrier treasure room and fail to do so.\nThe code embedded below modifies out original square drawing code by changing our If Statement to an If/Else Statement. Our test is still the same: it measures the mouseIsPressed variable and waits to see if it contains the boolean value \u0026ldquo;true.\u0026rdquo; If it does, a teal square is produced. If the mouseIsPressed variable contains the boolean value \u0026ldquo;false\u0026rdquo;, the code in our else block is run, giving us the secondary result of drawing peach circles to the screen instead. The code outside of the If Statement continues to run regardless:\nMultiple Tests, Multiple Results (The If/Else If Statement) Yet another, more advanced logic flow can be created by creating conditionals that chain together multiple test/result pairs, creating an If/Else If Statement. This statement is comprised of as many tests and corresponding result blocks as we see fit, each utilizing its own set of if/else keywords, parenthesis, and brackets. Logically, the IF/Else IF Statement looks like the diagram below:\ngraph TD A{Test 1} --|True| B(Result Block 1) A{Test 1} --|False| F B--E(Code After Conditional) F{Test 2}--|False| E(Code After Conditional) F{Test 2}--|True| G(Result Block 2) G -- E style A fill:#00ffff,stroke:#FFFFFF; style B fill:#00ffff, stroke:#FFFFFF; style F fill:#fe856b, stroke:#FFFFFF; style E fill:#FFFFFF, stroke:#FFFFFF; style G fill:#fe856b, stroke:#FFFFFF;  Translated into code, an If/Else If statement looks like this:\nif (test 1) { result 1 } else if (test 2) { result 2 } Notice the formating in this structure. Instead of following our else keyword with an open bracket, we immediately follow it with the if keyword and another test/result pair. We can continue this chaining to make If/Else If Statements that comprise as many different options for tests and results as we need. Now our video game analogy becomes a bit more complex: we can approach multiple rooms, each with their own barriers and their own separate treasures. If we can\u0026rsquo;t pass through the first room, we try to pass through the second. If we can pass through any of the barriers, we will receive whatever is inside of that specific room, but not all of the treasure in all of the rooms:\nWe can now make one final modification to our embedded code and change our If/Else Statement into an If/Else If Statement! In this version below, we\u0026rsquo;ve divided the screen vertically into three equal sections and designed three test/result pairs to chain together. Each of these tests is comprised of multiple sub-conditionals: they all start by checking to see if mouseIsPressed contains \u0026ldquo;true\u0026rdquo;, and they all ask for additional conditions to be simultaneously satisfied through the use of the \u0026amp;\u0026amp; operator. Based on the portion of the canvas our mouse\u0026rsquo;s Y location falls within, we will either draw a teal square, a pink square, or a peach circle. As always, he code outside of the If Statement continues to run regardless:\nBuilding extensive If/Else If Statements can end up making your code look cluttered and hard to debug if certain tests aren\u0026rsquo;t acting the way they should. In our Graphics Unit, we\u0026rsquo;ll learn how to nest a conditional test inside of another test in order to make more clean-looking, sensical logic flows for advanced projects.\n"
},
{
	"uri": "/4_physicalcomputing/1_digital_io/",
	"title": "Digital I/O",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Everything on a chapter page will be centered.\n"
},
{
	"uri": "/2_graphics/1_proceduraldrawing/",
	"title": "Drawing &amp; Shapes",
	"tags": [],
	"description": "",
	"content": "Chapter 4 The upcoming assignment will be to recreate four images using p5. We have some experience with shapes, but for this we will need to go over a few more basic concepts:\n Review of basic shapes Introduction to more advanced and custom shapes Color and transparency  "
},
{
	"uri": "/1_introtocoding/1_codingbasics/1_lesson_1/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s get started! In this first example, we\u0026rsquo;ll cover the basics of text-based coding in the JavaScript language.\nHead to the P5.js Web Editor, sign up for a personal account, and open a new File. You\u0026rsquo;ll be presented with a new editor window that displays the code found in your \u0026ldquo;sketch.js\u0026rdquo; file. The P5 Web Editor starts you off with some basic code that is needed to create a blank, grey canvas.\nYou can also edit and read the code found in your project\u0026rsquo;s HTML and CSS files by clicking on the arrow found near the upper lefthand corner of the editor panel:\nAnd then clicking on the files that are listed:\nAs we discussed, we will mainly be coding inside of the \u0026ldquo;sketch.js\u0026rdquo; file, so the P5 Web Editor presents this file to you automatically when a new File is created.\nFunctions Take a look at the code below, which matches the code in your project on the P5 Web Editor:\nWhen coding a project that uses the p5.js library, every JS file must contain the two large blocks you see below: function setup()  and function draw(). These are functions: code elements that behave like actionable machines, producing a result. In our projects, we will be mainly calling for certain functions to be run inside of the two main function blocks you see here. These larger function blocks use a pair of curly braces ( \u0026ldquo;{ }\u0026rdquo; ) as boundary markers; any code that you want to place inside of these blocks must be typed between the open and closed curly brace pair.\nIn p5.js-based projects, code that is placed inside of the larger setup() and draw() blocks will behave differently based on which block they are called from within, and it\u0026rsquo;s important for us to understand the difference between their behaviors.\nAny code inside of setup() will only be run once upon the loading of the HTML file. You can rerun anything in the setup() block by refreshing your browser.\nThe draw() function behaves like a loop. Any code placed inside this block will be read by our browser from top to bottom and executed over and over again. The speed of the draw() block loop is 60 cycles (or frames) per second.\nTake a look at the embedded code below, and add the new console.log() lines into your project on the P5 Web Editor so that both code examples match. Once you\u0026rsquo;ve done that, hit the Run Button (shaped like a triangle) at the top of your editor window, and watch the section below marked \u0026ldquo;Console.\u0026rdquo; After a few seconds, hit the Stop Button.\nPlace your cursor inside the Console section and scroll up. You should see the statements \u0026ldquo;Ready\u0026rdquo; and \u0026ldquo;Set\u0026rdquo; printed only once, and then a long list of \u0026ldquo;Go!\u0026rdquo; plus an increasing number statements listed after that. The first two statements only printed to the console once since the were coded inside thesetup() block, while the \u0026ldquo;GO!\u0026rdquo; statement printed multiple times. The increasing number attached to \u0026ldquo;GO!\u0026rdquo; represents the current iteration of the draw() loop.\nArguments Functions can be given additional information in order to specify the way they behave. This additional information is known as an argument, and is added into the parenthesis found behind function names. In our previous example, the createCanvas(), background(), and console.log() functions all include arguments designed to specify their behavior.\nIn your code, try changing the single number argument found inside the parenthesis for the background() function like this:\nbackground(96); background() sets the color of the canvas background, and a single number between 0 and 255 will result in a black (0), white (255), or gray canvas. If we want something more exciting, we can add two more arguments into the background() function, each of them separated by a comma, like this:\nbackground(96, 110, 220); Our canvas background is now a shade of violet. When three arguments are passed into the background() function, it blends red, green, and blue hues together (in that order) based on the values you give it.\nEach function in the p5.js library will require different types of data in different orders to adjust their behavior. Check the P5.js Reference Page to see a complete list of functions and their adjustable properties.\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/includingtone/",
	"title": "Including Tone",
	"tags": [],
	"description": "",
	"content": "For Tone.js to work in your sketch you need to include it in your HTML file.\nOpen your project-folder and find the index.html file. Add this line under the first three script tags:\n\u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/tone/0.11.0/Tone.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; This loads Tone.js in your sketch.\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/instruments/instruments/",
	"title": "Instruments",
	"tags": [],
	"description": "",
	"content": "Types of synths Basic Synth Envelope Attack, decay, sustain, release\ntriggerAttackRelease\nNotes and frequency Timing "
},
{
	"uri": "/1_introtocoding/",
	"title": "Intro to Coding",
	"tags": [],
	"description": "",
	"content": "Unit 1 The following lessons will focus on introducing students to the technical aspects of coding as a medium for artistic creation. These lesson require no previous knowledge of coding as a concept, computer science, or the JavaScript/HTML/CSS languages. Throughout this course, we will be primarily using the p5.js JavaScript library to create our coding projects. This library simplifies some aspects of creating web art with JavaScript, which makes it an ideal teaching environment for first-time coders. Some of the functions learned in this course may conflict with traditional JavaScript coding practices, but the conflicts are minimal.\nWhile completing these lessons, be sure to check out additional examples and extended readings in the Resources section to build a stronger understanding of these concepts.\n"
},
{
	"uri": "/4_physicalcomputing/1_digital_io/1_lesson_1/",
	"title": "Lesson 1",
	"tags": [],
	"description": "",
	"content": "Digital Inputs Buttons\n"
},
{
	"uri": "/4_physicalcomputing/2_analog_io/1_lesson_1/",
	"title": "Lesson 1",
	"tags": [],
	"description": "",
	"content": "hi\n"
},
{
	"uri": "/4_physicalcomputing/3_serialcommunication/1_lesson_1/",
	"title": "Lesson 1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/2_graphics/2_paintapp/1_lesson_1/",
	"title": "Measuring the Boundaries of a Shape",
	"tags": [],
	"description": "",
	"content": "In your projects, you\u0026rsquo;ll often want to have interactive mouse events tied to specific shapes or drawings. It\u0026rsquo;s important to remember that any shape or object drawn on the canvas can\u0026rsquo;t simply be referred to by name, since p5.js has no way of knowing the difference between a green triangle or a pink square. In order to determine whether or not a user has clicked on a 2D object, we have to use conditional statements to measure whether or not the mouse click occurred within the boundaries of that object.\nThe process of tracking and reacting to mouse clicks on objects will becomes easier with the use of a specialty library, particularly ones used to make game development more intuitive. We\u0026rsquo;ll begin working with just such a library, p5.play.js, in the next chapter.\nStationary Shape Measurements Squares and Rectangles Let\u0026rsquo;s imagine that you want to register whenever a user clicks their mouse inside of the square drawn below. The function called to draw the square looks like this:\nrect(200, 50, 150, 150); The coordinates of the upper lefthand corner of the square match the first two arguments of our rect() function. Using basic math and the last two arguments of the function, we can figure out the coordinates of the remaining corners:\nNow we can see that the corners of our rectangle have a handful of shared coordinates. Let\u0026rsquo;s look at our shape again, highlighting the four significant borders we need to measure (pink for our X coordinates, orange for our Y coordinates) and image what we should measure to know when our mouse cursor has landed inside:\nBased on our math, we need to code a test that can only pass if our mouse is clicked and if it\u0026rsquo;s located at a point greater than 200 X and less than 350 X and less than 200 Y and greater than 50 Y. We can do this by making a conditional that measures all four of those conditions simultaneously. As a reminder, the \u0026amp;\u0026amp; operator will stand in for the word \u0026ldquo;and\u0026rdquo; in our test. The following code demonstrates a border measurement click test, causing the background color to change only when we click inside the bounds of the square:\nTry modifying this code by removing the \u0026ldquo;mouseIsPressed\u0026rdquo; portion of the test. This allows the background to change when the mouse cursor simply hovers over the square.\nYou\u0026rsquo;ll notice that the individual greater than/lesser than tests in the example above are incased inside of parenthesis pairs. This is done in order to make out code look cleaner and to make each portion of this multi-portion test easier to identify. Be careful to count your individual symbols and not leave out the essential parenthesis that forms the if ( ) test format!\nCircles Measuring the boundaries of a circle is a slightly more challenging task, since there are no sides for us to measure. Instead, we\u0026rsquo;ll need to know the coordinates of the circle\u0026rsquo;s center, the diameter of the circle, and its radius:\nThe first three values can be found as the four arguments passed into the ellipse( ) function called to draw the circle to the canvas. The circle\u0026rsquo;s radius is half of its diameter. We should declare a variable to hold that result of the circle\u0026rsquo;s diameter divided by 2 so that we can use that value later.\nSince the radius is the distance between the center of the circle and its enter outer perimeter, our next step is find a way to trigger an event whenever our mouseX and mouseY variables cross that perimeter. If we can compare the value in our circle radius variable against the distance between the current mouse location and the circle\u0026rsquo;s center, we could use that to test if our mouse has hovered over or been been clicked inside of our circle:\nTo accomplish this, we can use p5.js\u0026rsquo; dist() function. This function lets us pass in two pairs of X/Y coordinates and returns the number of pixels between those two points. Using this function, we need to devise a test that compares the distance between our mouse location and the circle\u0026rsquo;s center with the circle\u0026rsquo;s radius value. The test should only pass if the distance value is less than the radius value and if the mouse is clicked. Storing the ever-changing result of our dist() function inside of a variable will make this test easier to understand, and the code embedded below shows an example of what this test should look like:\nMoving Shape Measurements The techniques learned above will also work for shapes that are moving across the canvas. The only difference in our boundary measurement tests will is the need to measure our mouse location against variables that stand in for the ever-changing location of the shape\u0026rsquo;s edges/centers. Take a look at the code below and test it out. The background will change to different colors when you click on the square versus when you click on the circle. Compare this code to the ones we studied above:\n"
},
{
	"uri": "/5_integrationproject/1_proposal/",
	"title": "Proposing Your Integrations Project",
	"tags": [],
	"description": "",
	"content": "Before you begin on your project, you should submit a proposal to your instructor with the following informaiton:\n Discription of your project. (be as detailed as possible) How you will utilize elements from the graphics unit. How you will utilize elements from the audio unit. How you will utilize elements from the physicacl computing unit. External resources such as images, sounds, or physical computing components that you plan on needing. Any other important information about the project.  The purpose of this is so that your instructor can make sure that your project meets all of the criteria listed on the previous page, that your project can be completed in a reasonable timeline, and so they can manage resources to better help with any technical issues that may arise.\nYour instructor will either approve your proposal, or ask you to revise parts of it as needed before you begin working on the project.\n"
},
{
	"uri": "/3_audio/1_sampler/",
	"title": "Sampler with effects",
	"tags": [],
	"description": "",
	"content": "Chapter 7 This chapter will ask you to create a multi-sound sampler that plays back sound files and processes them with various audio effect processors. The following lessons focus on understanding the web audio sound signal path, loading sound files into a sample player, and adding/controlling audio effects.\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/sample-playback-and-effects/samples/",
	"title": "Samples to pick from",
	"tags": [],
	"description": "",
	"content": "Shorter weird sounds: Popcorn maker https://s3-us-west-1.amazonaws.com/leesamples/samples/Popcorn+Maker+In+Hell.mp3 Long weird sounds: Water trickle https://s3-us-west-1.amazonaws.com/leesamples/samples/Water+Trickle.mp3 All hands on deck https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/All+Hands+On+Deck.mp3 Angry bees https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Angry+Bees.mp3 Going down https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Going+Down.mp3 Hammer it https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Hammer+It.mp3 Waves on mars https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Waves+On+Mars.mp3 Rhythmic weird sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Aqua+Beat.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Blacksmiths+Revenge.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Car+Service.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Drip+Drip+Drip.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Piston+Broke.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Tuning+In.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Bubbles.mp3 Rhythmic loops https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/60+bpm/Ping+Pong+Ping.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/60+bpm/Throwing+Pebbles.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Bouncing+Skittles.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Bouncing+Skittles2.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Ping+Pong+Glitch.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Rhythmic+Chains.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Scrap+Bell+Arp.mp3 Short percussive melodic sound: https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/BBQ+Lid+Hit.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Vase+Hit01.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Truro+Cathedral+Bell+with+seagulls.mp3 Long melodic sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/SID+Arps+119bpm.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Sun+Rising+Arp+120bpm.mp3 Short Fx sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_1.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_2.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_3.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_4.mp3 Short percussion sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/perc_1.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/perc_2.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/perc_3.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/perc_4.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Bamboo+Hit.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Golf+Swing.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Microwave+Hit.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Spade+Hit.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Vase+Hit02.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Cowbell01.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Kick01.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Skip+Tom01.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Skip+Tom02.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Skip+Tom03.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Skip+Tom04.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Snare01.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Snare02.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Spade+Kick.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Percussives/Water+Blip.mp3 Short nature sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Bee.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Chiff+Chaff.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Peacock.mp3 Long nature sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Birdsong.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Crows+and+Birds.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Waves01.mp3 Reversed sounds https://s3-us-west-1.amazonaws.com/leesamples/samples/Reversed+Sounds/Air+Reversed.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Reversed+Sounds/Cowbell+Reversed.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Reversed+Sounds/Crank+Reversed.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Reversed+Sounds/Crockery+Reverse.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Reversed+Sounds/Spanner+Reverse.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Reversed+Sounds/Vase+High+Drop.mp3 "
},
{
	"uri": "/3_audio/2_synthsandmusic/2_lesson_2/scheduling-signals/",
	"title": "Scheduling Signals",
	"tags": [],
	"description": "",
	"content": "View slidesSetting Values  This will set the value when ever you trigger it  oscillator.frequency.value; //returns the current frequency value oscillator.frequency.value = 100; //sets the value immediately  Scheduling Values  setValueAtTime - to schedule a value change at a precise time. linearRampToValueAtTime - to ramp to a value starting from the previously scheduled value. exponentialRampToValueAtTime - same as the above, but with an exponential curve instead of a linear curve. setTargetAtTime - unlike the RampValueAtTime methods, in setTargetAtTime, the time attribute is when it should start ramping towards the value instead of arrive at the value. It takes a third parameter which is the time constant at which it will change. setValueCurveAtTime - sets an array of values which will be evenly invoked over the course of the duration. cancelScheduledValues - cancels all values after the specified time.   Ramping values  linearRampTo - set a value and a ramp time and the signal will begin linearly ramping towards that value. exponentialRampTo - same as above but exponential ramp. rampTo - same interface as the above methods, but will automatically decide to use linear or exponential based on the units of the signal.   Time  Number: seconds  1.2: 1.2 seconds   String: synchronized to the Tone.Transport   Notation time  Describes time in BPM and time signature relative values.  \u0026ldquo;4n\u0026rdquo; = quarter note \u0026ldquo;8t\u0026rdquo; = eighth note triplet \u0026ldquo;2m\u0026rdquo; = two measures \u0026ldquo;8n.\u0026rdquo; = dotted-eighth note     Relative time   Prefix any of the above with \u0026ldquo;+\u0026rdquo; and it will be interpreted as \u0026ldquo;the current time plus whatever expression follows\u0026rdquo;\n \u0026ldquo;+1m\u0026rdquo; = 1 measure from now \u0026ldquo;+0.5\u0026rdquo; = half a second from now     scheduling examples  see signal for specifics  starter\n More LFOs  remaking effects with lfos  we can use an LFO to remake any effect with \u0026lsquo;auto\u0026rsquo; in the name  autowah, autopanner, autofilter also tremolo, vibrato fast tremolo is amplitude modulation fast vibrato is frequency modulation    examples\n Tremolo and Vibrato starter\n Autofilter and Autopan starter\n"
},
{
	"uri": "/2_graphics/3_bugsquish/1_lesson_1/",
	"title": "Spawning Sprites &amp; Building Sprite Groups",
	"tags": [],
	"description": "",
	"content": "Including the p5.play Library Spawning Sprites "
},
{
	"uri": "/3_audio/2_synthsandmusic/1_lesson_1/",
	"title": "Synthesizers",
	"tags": [],
	"description": "",
	"content": "Understanding Synthesizers Building a Synthesizer Oscillator Types Oscillators The most basic unit of synthesis in tone is Tone.Oscillator.\n Sine Triangle Sawtooth Square  example\nChanging The Oscillator Type "
},
{
	"uri": "/3_audio/1_sampler/1_lesson_1/",
	"title": "WebAudio Basics &amp; Sound File Players",
	"tags": [],
	"description": "",
	"content": "View slidesUnderstanding the Audio Signal Path Creating a Sound File Player  Playing Multiple Sounds with Tone.Players Instead of making multiple single-file soundfile players, we can build one Tone.Players instrument and load it with multiple soundfiles. To define which sounds to play we create an object with multiple file paths (done by opening a pair of { } brackets inside of the Tone.Players functions parenthesis), each with a unique name to call the sound up by later. You can think of this name as a type of variable that is inside of an object.\nSince we are now dealing with multiple sound files, we should cover some of the best ways to trigger individual sounds in your project, as well as ways to modulate and manipulate those sounds while they are playing.\nTriggering Sounds There are multiple ways of triggering and controlling sounds. Below we look at keyIsDown, buttons, and sliders.\nkeyIsDown Since we have multiple sounds to play now we can use keys on the keyboard to trigger them. To do that we use the p5 function keyIsDown. The embedded code below shows this method in action.\nStarting the sounds To get each specific sound to play we use a special syntax: players.get(\u0026ldquo;samplename\u0026rdquo;). In this case we do either players.get(\u0026ldquo;bells\u0026rdquo;) to select the bells sound or players.get(\u0026ldquo;arpeggio”) to play the arpeggiated synthesizer sound. Then we call .start() on the same line to play those sounds.\nUsing buttons Instead of using keyIsDown we can create buttons to trigger sounds. The below example is the same as the previous one just now we use buttons.\nWe create a button with the p5 function createButton. Inside the ('') we give the button text to display.\ncreateButton(\u0026quot;button label\u0026quot;); We can then customize the button by modifying some of its properties. button1.position(x, y) determines the button location.\nbutton1.mousePressed() calls a function that we define below. Inside of this function put any code that you want to run when you click the button. In the embedded example below, we made three new functions: play1, play2, and play3. Inside of each, we have our multiplayer.get(\u0026ldquo;samplename\u0026rdquo;).start() function that causes the Tone.Players object to grab and play the corresponding sound file:\nUsing sliders To change an aspect of our sound while it is playing we can use a slider. To make a slider in p5.js use createSlider().\nSyntax createSlider(min,max,[value],[step]); Parameters  min - minimum value of the slider max - maximum value of the slider value - default value of the slider step - step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)  To get the current value of the slider and use it in your code, call for slider.value() and attach it to a property of your player.\nLabeling your sampler It\u0026rsquo;s a good idea to label any sliders used to control your sampler so that you know what they do. Here is a quick reminder of how the text() function works:\nSyntax text(str,x,y); Parameters  str - the alphanumeric symbols to be displayed- x-coordinate of text y - the y axis coordinate of text x - the x axis coordinate of text  In the code below, we use a button to trigger the playback of each sound and a slider, labeled \u0026ldquo;[File Name] Playback Speed\u0026rdquo; to change the playback speed rate of our sound while it plays:\n"
},
{
	"uri": "/3_audio/3_soundsinbugsquish/2_lesson_2/",
	"title": "Adding Sound Events to Games: Synthesizers &amp; Sequences",
	"tags": [],
	"description": "",
	"content": "Lesson goes here\n"
},
{
	"uri": "/2_graphics/2_paintapp/",
	"title": "Advanced Interaction with Drawings",
	"tags": [],
	"description": "",
	"content": "Chapter 5 The next assignment will ask you to build an interactive paint app. The following lessons focus on measuring when your mouse has crossed the boundaries of a shape and building nested conditional statements to design complex interaction logic.\n"
},
{
	"uri": "/4_physicalcomputing/2_analog_io/",
	"title": "Analog I/O",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Everything on a chapter page will be centered.\n"
},
{
	"uri": "/3_audio/1_sampler/2_lesson_2/",
	"title": "Audio Effects",
	"tags": [],
	"description": "",
	"content": "View slidesAudio effects are used to modulate and manipulate a sound source in order to create more experimental sonic results. Let\u0026rsquo;s learn how to start incorporating effects into our web project!\nAdding Audio Effects into the Signal Path In order to pass sound from our sound source into an audio effect, we need to complete the following steps:\n Build our chosen audio effect, assign it to a variable, and connect its output to the master speakers (using the .toMaster( ) method) Build our sound source, assign it to a variable, and connect its output to our audio effect (using a new method called .connect( ) The argument passed into the .connect( ) method is the variable we created to store our audio effect  Here is an example of how to add an audio effect into your code and attach it to the output of your sound file player. In the code embedded below, we create a delay effect and send the output of our Tone.Players object through the effect before it gets passed to our master output speakers:\nEvery effect has a universal parameter called its wet value. The wet value represents the proportion of mix between the original (or \u0026ldquo;dry\u0026rdquo;) sound source signal coming into the effect and the effected (or \u0026ldquo;wet\u0026rdquo;) signal coming out of the effect. Try adjusting the slider in the embedded code above to hear the resulting sound at various rations of dry/wet mixes.\nCommon Audio Effects Tone.js has a large collection of audio effects that can be used to modulate a sound source. Below, we discuss some of the most commonly used audio effects and demonstrate how we can use them. To see a complete list of possible audio effects and their parameters in the Tone.js library, head to the library\u0026rsquo;s API documentation by clicking here.\nReverb Reverb is the persistance of a sound that continues after the original sound has ceased. It is made up of many echos bouncing off the walls of a space and gives us cues to the size of that space. If you have ever been in a very large room, think church, stadium etc; and heard your voice echo around it, this is reverb.\nReverb Parameters  roomSize - the amount of time for the sound to decay.  Delay A delay effect records a sound into a buffer and plays it back after a certain period of time. The example below demonstrates a particualr style of delay known as a PingPong Delay. This causes the delayed sound to pan back and forth between your right output speaker and your left output speaker.\nDelay Parameters  delayTime - the time between consecutive echos. feedback - the amount of the effected signal which is fed back through the delay.  Distortion Gives sound a “fuzzy”, “growling”, or “gritty” tone, think electric guitar.\nDistortion Parameters  distortion - the amount of distortion (must use a nominal range of 0-1)  does not require the addition of .value to modify    Tremolo Tremolo is the variation in amplitude of sound achieved through electronic means. Musically, it results in a \u0026ldquo;warbly\u0026rdquo;, vibrato-induced sound. This effect works best on longer duration, sustained sounds.\nBecause the tremolo effect relies on an oscilator to generate the amplitude change, we need to add the .start( ) method upon creation of the effect. This can be done on the same line, right after the .toMaster( ) method is called. More information on oscilators can be found in the Resources section, as well as the next chapter.\nTremolo Parameters  frequency - the rate of the effect, reuslting in faster vibrato or slower vibrato depth - the depth of the effect upon the sound source  BitCrusher Bitcrusher is a distortion effect that creates a lo-fi version of the incoming sound source through a digital reduction of the audio\u0026rsquo;s resolution (as known as its bitdepth).\nBitCrusher Parameters  bits- the number of bits to downsample the signal (must use a nominal range of 1 to 8)  does not require the addition of .value to modify    PitchShift PitchShift is an effect that changes the pitch of an incoming sound source by shifting its pitch up or down by a designated number of half steps. For audio files, this is done without having to change the player\u0026rsquo;s playbackRate property.\nPitchShift Parameters  pitch- the number of half steps to shift the sound in pitch (positiove numbers shift the pitch higher, negative numbers shift the pitch lower, and \u0026ldquo;0\u0026rdquo; keeps the sound at its original pitch  does not require the addition of .value to modify    Chorus A Chorus effect combines elements of the Delay and Tremelo effects. An incoming sound source is slightly delayed and layered on top of the original, allowing one sound source to be perceived as a group of many. They layered, delayed \u0026ldquo;copies\u0026rdquo; are then modulated in amplitude, causing their pitch to waver slightly and not perfectlty match the pitch of the original source. This simulates a natural effect that occurs when a chorus of singers or a group of instruments perform the same note simultaneouly, with each individual performer playing slight out of tune from the next. This effect works best with a delay time between 2 and 20 milliseconds, and a slower frequency of modulation.\nWhile the chorus effect is similar to the Tremolo effect, we do not need to start an internal oscilator by adding the** .start( )** method upon creation of the effect. Also, the delayTime parameter for this effect does not need the additional **.value** property in order to be changed.\nChorus Parameters  frequency - the rate of the effect, reuslting in faster vibrato or slower vibrato delayTime - The delay time in milliseconds of the chorus (nominal range for a Chours delay time is between 2 and 20ms)  does not require the addition of .value to modify the parameter for this effect   depth - the depth of the effect upon the sound source  "
},
{
	"uri": "/1_introtocoding/3_reuseitwithmodularcode/2_lesson_2/",
	"title": "Code that is a thing - Objects with class",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/2_graphics/1_proceduraldrawing/2_lesson_2/",
	"title": "Color and Transparency",
	"tags": [],
	"description": "",
	"content": "Working with Color in p5.js There are a number of ways to set the color of objects, shapes, backgrounds, and outlines in p5.js. With the exception of stroke outlines (which uses the stroke() function) and canvas backgrounds (which uses the background() function), we will use the fill() function to add color to things that we draw.\nThe fill()function works like a paint can resting on top of a ladder: when it tips over, it will change the color of everything below it. Since our code is read top to bottom, calling the fill() function before calling any shape functions will set the color of all shapes drawn from that point forward. To change the color of a specific shape, you will need to call the fill() function again immediately before the function that draws that shape.\nSetting Color with fill( ) p5.js allows the fill() function to accept a number of different data types. Strings allow you to choose from a handful of colors that p5.js designers have preprogrammed into the main p5.js library. Not all colors imaginable are possible to represent with a string, so try out as many as you can think of and see what works!\nfill(\u0026quot;lightGreen\u0026quot;); ellipse(12, 36, 78, 90); We can also use numbers as arguments in order to create very specific color shades. We do this by balancing red, green, and blue values. Start by designing a color shade using a tool such as an RGB Color Calculator to find the shade you\u0026rsquo;d like to use. Once you pick your shade, you\u0026rsquo;ll notice the color\u0026rsquo;s red, green, and blue values represented as three discrete number values between 0 and 255:\nWe can now add these values in order (R,G,B) as three arguments when we call the fill() function, and p5.js will mix these values to create our chosen color.\nfill(186, 132, 135); //rose color We can also pass three or six digit hex code colors into the fill() function, but they need to be passed in as a string.\nfill('#222222'); //dark grey color One of the benefits of setting color through RGB values is that you can easily change one or more values in realtime by replacing fixed values with variables. The code below demonstrates all of the previously discussed methods of setting color with the fill()function as well as demonstrating the process of changing color values through interaction:\nPackaging RGB values together As you can see, in order to replace a fixed R,G,or B color value with something changeable, we will need to swap it out with a variable. Since three arguments are needed to set a color through this manner, we would need either three separate variables, or we could package all three together into one array:\nvar roseColor = [186, 132, 135]; fill(roseColor); This works because all three RGB values are separated as three discrete elements inside the array when we build it. We could also condense things even further by using p5\u0026rsquo;s color()function, which generates color data out of RGB values and stores that data neatly into a variable, removing our need for an array altogether:\nvar roseColor = color(186, 132, 135); fill(roseColor); The difference between fill() and color() is that fill( ) sets the color of an object whereas color( ) actually generates a color out of hexcode or RGB values. There are benefits and downsides to using either of them, and which one you use may depend on your specific project needs. To learn more about their differences, head to the p5.js Reference Page.\nGrayscale and Transparency When using RGB color values, we will need to use one discrete value to represent each of our primary colors. If we want to set a grayscale color, we can simply pass one argument into the fill() function. Using 0 (black) to 255 (white), we can create shades of gray in our project. The following code demonstrates a changing grayscale fill, which you can adjust by moving your mouse from left to right:\nWe can also control the transparency value of a color by adding in an alpha value. For RGB colors, the alpha is represented as a number between 0 (completely transparent) and 255 (fully opaque) and passed in as a fourth argument to fill() or color(). For transparent grayscale colors, we can add the alpha value as the second argument. The code below demonstrates how transparent colors can be used in a project for realtime color blending:\n"
},
{
	"uri": "/1_introtocoding/1_codingbasics/2_lesson_2/",
	"title": "Coordinates and the Canvas",
	"tags": [],
	"description": "",
	"content": "The canvas in p5 is the area that you can see on your screen, and is displayed in the preview window to the right of the code editor. This canvas acts much like a painting canvas in the following ways:\n Whatever you want the viewer to see must be on the canvas. You can cover up something on the canvas by adding something new on top of the original object. The canvas can come in many colors and sizes There is a definitive top and bottom for the canvas.  Look at the default starting code in p5, you can see a few items that are used to set up the canvas.\nInside of function setup(), you can see the line createCanvas(400, 400); this line is what tell p5 to create the canvas, and how large to make it. The numbers represent how wide and tall to make the canvas from the top-left corner, in pixels. The default is 400px x 400px. Try adjusting these number to see how the canvas changes.\nThis is the default P5 starting code. All it does is make the canvas and give it a background color. Everything else is up to you!\nInside of function draw(), you can see the line background(200); this line is what determines the color of the canvas. We will discuss color in more detail in a later chapter, but know that the number represents the grayscale shade of the canvas. 0 = completely black, and 255 is completely white. (number higher than 255 will not affect the color and will will just read as 255 when the code is executed)\nAs previously mentioned, the canvas is arranged in pixels, similar to a coordinate plane in geometry. What is important to know is that the point 0, 0 is the TOP LEFT corner of the canvas, like quadrant 4 of a coordinate plane.\nImage originally from: https://socratic.org/questions/in-what-quadrant-is-the-point-6-7  As shown in the code below, by increasing the X coordinate of various items on the canvas, that object will move to the right. Increasing the Y coordinate will lower the item on the canvas. The inverse of this is also true.\nIn the next code, the same functionality from the previous code is present, but now when you click the mouse, a bulls-eye pattern will appear at the mouse’s location. The XY pixel coordinate of this shape is also displayed. Try clicking in various places to see how the location numbers change.\nDrawing basic shapes on the canvas: Below are a few basic shape functions that we will expand on later. All shape functions need a set of coordinates in order to be drawn on the screen.\n line(X1, Y1, X2, Y2);  line() draws a straight line between the two coordinate points given as arguments.   ellipse(X location of center, Y location of center, width of shape, [height of shape])  An ellipse is a circle or oval. By default, an ellipse is drawn out from the center point. (note, the height of the shape is not required to draw an ellipse, but p5 will assume that it will be a perfect circle unless you give it a specific height)   rect(X of top left, Y of top left, width of shape, height of shape)  Rectangles are drawn similarly to the canvas: starting at the top left, and then out by a specified width and height. Having the last two arguments be identical will result in a perfect square.   triangle(X1, Y1, X2, Y2, X3, Y3)  Triangle can be a little difficult. Each pair of numbers is the XY pixel location of a point of the triangle. To move the shape, you will have to move each point individually, and may have to do a little math in order to make everything line up properly.    For more information on the shape functions, look at the chapter “Basic and Advanced Shapes”\nUse what we have learned so far in order to recreate the following image using the image and code below as a guide line:\nSelect all of the code in this Codepen and paste it into a new P5 project in order to start your assignment. "
},
{
	"uri": "/3_audio/2_synthsandmusic/1_lesson_1/envelopes/",
	"title": "Envelopes",
	"tags": [],
	"description": "",
	"content": "Enevelopes  Tone example   ADSR  Attack time is the time taken for initial run-up of level from nil to peak, beginning when the key is first pressed. Decay time is the time taken for the subsequent run down from the attack level to the designated sustain level. Sustain level is the level during the main sequence of the sound\u0026rsquo;s duration, until the key is released. Release time is the time taken for the level to decay from the sustain level to zero after the key is released.   Envelopes example starter\n More envelopes starter\n"
},
{
	"uri": "/2_graphics/",
	"title": "Graphics (p5.js)",
	"tags": [],
	"description": "",
	"content": "Unit 2 The following chapters, lessons, and assignments will focus on using your understanding of coding basics to create 2D graphics and games using the p5.js and p5.play.js libraries. Topics covered include basic procedural drawing techniques (placing shapes on a cartesian plane canvas, RGB \u0026amp; Alpha color mixing, and making custom/complex polygons), and game building using Object-Oriented Programming skills.\nWhile completing these lessons, be sure to check out additional examples and extended readings in the Resources section as well as the p5.js and p5.play.js library reference websites to build a stronger understanding of these concepts.\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/2_lesson_2/higherlevelsequences/",
	"title": "Higher level sequencers",
	"tags": [],
	"description": "",
	"content": "Event  abstracts away Tone.Transport.schedule and provides a schedulable callback for a single or repeatable events along the timeline loop  true of false   loopEnd loopStart mute  won\u0026rsquo;t fire if mute is true      playbackRate  interval if looped   probability  add randomness to note triggered probability   progress  where are we in the loop?      https://codepen.io/lsuddem/pen/bZGwaz?editors=0011   Part  collection Tone.Events which can be started/stopped and looped as a single unit. https://codepen.io/lsuddem/pen/aMbBPa  "
},
{
	"uri": "/4_physicalcomputing/1_digital_io/2_lesson_2/",
	"title": "Lesson 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4_physicalcomputing/2_analog_io/2_lesson_2/",
	"title": "Lesson 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4_physicalcomputing/3_serialcommunication/2_lesson_2/",
	"title": "Lesson 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/1_introtocoding/2_makingthings_happen/2_lesson_2/",
	"title": "Making Groups and Lists - Arrays",
	"tags": [],
	"description": "",
	"content": "Variables are great for adding updatable values into our code, but they also have their limitations. One major limitation is that variables can only be assigned one value at a time. Reassigning a new value to a variable removes the previous value from the computer\u0026rsquo;s memory, and we would need additional lines of code in order to return that variable back to its previous state.\nTake a look at the following code embedded below to see how the limitations of variables can end up leading to a code that looks more complex than it actually is:\nIn this project, we have six variables: three used to determine the RGB color values of the first square color option, and three more for the second square color option. Since the variables are all named something similar, it could be easy to mix them up when using them throughout the code. Plus, if we want to have more than just two square color options, we would need to add a new set of three variables for each new color. This will begin to make the code more complex and confusing than it needs to be, and the solution to simplifying this process is to build an array.\nBuilding Arrays An array is a list of variables that all share a similar label. We can use arrays to group together multiple values and use them all together, or one at a time, depending on our needs.\nTake a look at our newly-improved version of the previous code to see how the use of arrays make things simpler:\nIn this new version, we have two arrays: one called squareColor1 and the other called squareColor2. To build an array, we go through the same process of declaring a label and initializing values as we do with variables, except this time we contain all of the values inside of a pair of square brackets ( [ and ] symbols). We separate each value in the array by a comma just as we would with arguments inside of a function\u0026rsquo;s parenthesis. Now, we can call for the entire contents, laid out in order from left to right, to be passed into the fill() function\u0026rsquo;s arguments based on the results of our if statement.\nUsing Parts of an Array Instead of passing in the entire contents of an array all at once, we can choose which single item in the array we want to pull out and use in our code at any given moment. Here again is our previous code, modified to pull out on one item from each of the two square color arrays:\nEach value in an array is known as an element, and the position of that element in the array is known as its index. The first index of every array will always be known as the \u0026ldquo;0\u0026rdquo; index, and the number increases as we move to the next element in the array. If we place an index number inside of a pair of square braces behind the array name, we will use whatever element lives at that index position. The square is filled with the value 45 when the mouse is pressed, and the value 111 when it is not pressed. Open the example on CodePen or open your browser\u0026rsquo;s web console in order to see these values logged for you.\nComputers start counting at 0 instead of 1. Therefor, the first index in an array is known as the 0 index. If you have an array with 6 elements in it, their index numbers will be 0 through 5, not 1 through 6.\nCycling Through Elements in an Array Arrays are useful for holding a complete list of possible values, states, and objects that you can cycle through and use one after another. In the example below, we have one array that holds our four possible square colors, listed as strings. When you click the mouse, we pull out a new element from the array by moving through it one index position at a time. To do this, we can make a variable that grows by one every time the mouse is pressed (called clickCount in this example), allowing us to count every click of the mouse. Then, we take the result of that current clickCount value mod 4 in order to step through a repeating series of numbers (0-3) and put that current number into a variable (currentColor). All of this code is located inside of the mousePressed( ) block, which only runs the code inside of it when the mouse has been pressed. This number sequence matches up with the same index numbers associated with the four elements in our array, so we can use that variable and the value inside of it by placing it inside the square brackets behind the squareColors array in our fill( ) function. This allows us to step through each index in our array in a cyclical pattern:\n"
},
{
	"uri": "/1_introtocoding/2_makingthings_happen/",
	"title": "Making Things Happen",
	"tags": [],
	"description": "",
	"content": "Chapter 2 The following lessons will focus on adding functionality and interactivity to your projects, as well as creating loops and collections of data. Topics include basic logic gates/conditional tests, registering mouse and keyboard events, arrays and groups, and creating your own looping blocks of code.\nWhile completing these lessons, be sure to check out additional examples and extended readings in the Resources section to build a stronger understanding of these concepts.\n"
},
{
	"uri": "/2_graphics/3_bugsquish/1_lesson_1/moving-sprites/",
	"title": "Moving Sprites Around the Canvas",
	"tags": [],
	"description": "",
	"content": "Samples\n"
},
{
	"uri": "/2_graphics/2_paintapp/2_lesson_2/",
	"title": "Nested Conditionals &amp; Complex Boundary Measurement",
	"tags": [],
	"description": "",
	"content": "In our last lesson, you may have noticed that our conditional tests looked a little repetitive. When measuring shapes that have multiple boundaries on the same X or Y coordinate, we can save ourselves the hassle of repeating portions of a test by using Nested Conditionals. Lets take a look at a diagram demonstrating the logic of a Nested Conditional to refresh our memories from Unit 1:\ngraph TD H{Outer Test}-. True .-A H{Outer Test}-. False .-I subgraph A{Inner Test 1} --|True| B(Inner Result Block 1) A{Inner Test 1} --|False| F{Inner Test 2} F--|True| G(Inner Result Block 2) end F{Inner Test 2}--|False| E(Code After Conditional) I(Outer Test Result Block 2) B--E G -- E I -.-E style A fill:#00ffff, stroke:#FFFFFF; style B fill:#00ffff, stroke:#FFFFFF; style H fill:#2bf5be, stroke:#FFFFFF; style I fill:#2bf5be, stroke:#FFFFFF; style F fill:#fe856b, stroke:#FFFFFF; style E fill:#FFFFFF, stroke:#FFFFFF; style G fill:#fe856b, stroke:#FFFFFF;  With a Nested Conditional, we embed an Inner Level Test inside of an Outer Level Test. Unless we pass the Outer Level Test, we cannot attempt the Inner Level Test (making the Inner Level Test synonymous with a Result for the Outer Level Test). We can think of this a real-world challenge where out ultimate goal is to reach the golden hexagon shown in the picture below; if we can\u0026rsquo;t find a way to get past the green barrier, we won\u0026rsquo;t be able to get past the black barrier and get access to our reward:\nAs coders, using Nested Conditionals serves a number of practical purposes in addition to making our code look neat and tidy. While our previous boundary measuring tests weren\u0026rsquo;t too long, using multiple \u0026amp;\u0026amp;-linked subtests inside of one If Statement can make our code difficult to debug if that test isn\u0026rsquo;t working the way we want it to. Furthermore, Nested Conditionals allow us to devise more complex logic flows, which will in turn allow us to design more complex games and interactive art.\nNested Conditional Examples Let\u0026rsquo;s take a look at a code similar to one we worked with in the last lesson. This time, we have two squares that we want to interact with. Clicking on both causes different results, so we need to use an If/Else If statement:\nThis If/Else If test (ending with an additional else to keep the background gray if neither square is clicked on) works fine, but imagine if we had 20 squares in a row to click on! Fixing just a handful of them that weren\u0026rsquo;t working right would be tough to debug. How can we condense some of the repeated subtests and break them about into a Nested Conditional?\nLet\u0026rsquo;s start start to simplify things by finding repetition. First, both tests require that we check to see if the mouse has been pressed. Lets make that conditional into it\u0026rsquo;s own If/Else statement; if the mouse is pressed, we can run some more tests to see if we\u0026rsquo;re clicking inside a square, else the background stays gray:\nif(mouseIsPressed){ } else { backColor = \u0026#34;gray\u0026#34;; } Now we won\u0026rsquo;t be able to check anything else unless the mouse click test is passed first, and we don\u0026rsquo;t have to repeat that test twice as a subtest in our other conditionals (it will act like the green barrier in the picture above). Next, our two squares share the exact same Y coordinates on the canvas: the top boundary of each square is at 100 Y and their bottom boundaries are at 250 Y. This means we can condense these Y boundary measurements into their own second, inner test! If the mouse is located between these Y boundaries, we can continue on and check our X boundaries. We don\u0026rsquo;t have any result set up for failing this test, so we can simply use an If statement conditional here and add it into the Result section of the outer test (This additional test acts like the green barrier in the picture above):\nif(mouseIsPressed){ if((mouseY \u0026gt; 100) \u0026amp;\u0026amp; (mouseY \u0026lt; 250)){ } } else { backColor = \u0026#34;gray\u0026#34;; } We\u0026rsquo;re almost done! The X boundaries of each square are different, so we can\u0026rsquo;t condense our test any further than this. Our final tests will be placed inside the inner test we just wrote, and will serve as our reward for the mouse being clicked and being located inside of the Y boundaries of the two squares. Now we will need an If/Else If statement: if a click on the orange square occurs, change the background to lime, else if a click on the blue square occurs, change the background to gold. This is yet another layer before reaching our ultimate goal, and the entire Nested conditional will look like this:\nif(mouseIsPressed){ if((mouseY \u0026gt; 100) \u0026amp;\u0026amp; (mouseY \u0026lt; 250)){ if((mouseX \u0026gt; 100) \u0026amp;\u0026amp; (mouseX \u0026lt; 250)){ backColor = \u0026#34;lime\u0026#34;; } else if((mouseX \u0026gt; 300) \u0026amp;\u0026amp; (mouseX \u0026lt; 450)){ backColor = \u0026#34;gold\u0026#34;; } } } else { backColor = \u0026#34;gray\u0026#34;; } The code below works just like our original version, but with our final Nested Conditional in place:\nBracket Alignment \u0026amp; Test Levels Nesting conditional statements helps show other coders the order of our decision-making logic in more ways than one. When practicing this, there are a few things to keep in mind:\n The braces of each conditional test ( { } ) act like barriers: they contain a result that can only be accessed if we pass the test coded inside the preceding parenthesis. Make sure to count your braces when nesting one test inside of another; a test with a missing brace is like a room with a missing wall. Most code editors will help you out by automatically adding a closing brace whenever you type an open brace, but always be sure to check for yourself! Study the code examples above and you\u0026rsquo;ll notice that for every new layer of conditional we added, we first started by indenting the if/else keywords, result code, and brackets closer to the center of the editor window. This is a really good way of visually showing the order of tests to both yourself and other coders. Outer/first tests should always have their brackets, results, and keywords closer to the left side of the editor window, and each inner level test should have its corresponding code indented further into the center. While your code might still work if you don\u0026rsquo;t follow this system, it will most likely lead to lots of confusion if you have to debug a problem and can\u0026rsquo;t visually tell which test belongs inside of which! Thankfully, most code editors have a \u0026ldquo;Tidy\u0026rdquo; or \u0026ldquo;Beautify\u0026rdquo; command that you can run in order to help auto-indent and clean up your code spacing.  "
},
{
	"uri": "/3_audio/2_synthsandmusic/2_lesson_2/",
	"title": "Sequences",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/2_graphics/3_bugsquish/2_lesson_2/",
	"title": "Sprite Appearance",
	"tags": [],
	"description": "",
	"content": "So far we have gone over some of the basics of making a sprite and having it move around the canvas, which will prove integral to the upcoming Bug Squish assignment. However, so far our sprites have only appeared as randomly colored rectangle on the screen. This is fine enough to explore how sprites function and what properties you could control, but there are a few drawbacks to the default appearance:\n The color changes every time the code runs. This could be confusing if you have multiple sprites that behave differently and have similar sizes or locations. How will you tell them apart? It is boring. (probably the most important drawback) How many games have you played where the chcaracters were all various rectangles, devoid of any emotion or defining characteristics?  In the following section we will go over how to add static images to our sprites, how to change these images, and how to sequence them in order to create various character animations.\nHere is an example of our final goal of attaching an animation to a sprite:\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/",
	"title": "Synthesizer w/ sequencing",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Everything on a chapter page will be centered.\n"
},
{
	"uri": "/6_resources/2_variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/5_integrationproject/2_project/",
	"title": "Working on your Project",
	"tags": [],
	"description": "",
	"content": "During this time period, you will be working on your approved project. If you run into complications, be sure to check your various resources for helpful suggestions\n P5 refrence page. P5.play refrence and examples pages. Tone.js refrence and examples pages. The chapters and resourses page of this website. Ask your instructor for help.  As you go along through your project, the need for various changes and revisions will likely arise. Small changes are fine, but anything large shoudl be brought to your instructor\u0026rsquo;s attention.\n"
},
{
	"uri": "/2_graphics/3_bugsquish/3_lesson_3/another-bugsquish-lesson/",
	"title": "Collisions",
	"tags": [],
	"description": "",
	"content": "Understanding Collisions Example codes for collisions\nAdding to a Sprite Group on Collision\nRemoving from a Sprite Group on Collision\n"
},
{
	"uri": "/1_introtocoding/2_makingthings_happen/3_lesson_3/",
	"title": "Do it again - Loops",
	"tags": [],
	"description": "",
	"content": "Why Use Loops? Often times, projects that feature repeating patterns or duplicated actions result in a code that is overly long, and therefor difficult to troubleshoot. Take the following embedded code, which features a handful of alternating squares, as an example:\nTake a look at the amount of repeating functions in our draw() block. We use one pair of fill() and rect() functions to create each square. Because of this, we would need 200 lines of code in order to make a line of 100 squares. There is also a significant amount of repetition within the arguments of each rect() function: the last three arguments (Y axis location, width, and height) of each rect() are exactly the same, with the X axis location being the only difference.\nIn order to simplify this process, we can create a self-contained loop that repeats a block of code for a set amount of times before stopping. This way, we can re-run the two lines of code needed to make the square as many times as we want without having to explicitly retype everything.\nThis second version of the project uses a type of loop known as a for loop to create 100 squares, alternating between teal and pink colors in the fill() function and placing each square 20 pixels away from the previous one. This results in a much shorter code that then we would have had if we didn\u0026rsquo;t use a loop :\nUnderstanding For Loops The following logic chart breaks down the basic concept behind how a for loop works:\nTo create a for loop, we first design a set of statements that control how many times the loop runs and separate each one with a semicolon. First, we create a variable for use in the loop and initialize it with a starting value. This variable is typically given a one-letter label and is different from any other variable we are using elsewhere in our code. Next, we define a test that evaluates this variable on every loop and keeps the loop running as long as the test passes. If the test fails, the loop stops immediately. The test is always a relational expression, relating the value on the left to the value on the right (a table of common relational expressions and their operators can be found below). Finally, we write a statement that allows the loop variable to be updated every time the test is passed.\nTranslated into code, here is what the structure of a for loop looks like:\nfor (create variable; test; update variable){ repeated result block } In the embedded code below, our loop draws multiple lines. The variable i is declared with an initial value of 20. The loop runs for as long as i is less than 400. Every time the test passes, the value of i is updated to be the result of itself plus 8 (20, 28, 36, etc.). When i grows to be bigger than 400, the loop stops. Try adding console.log(i) inside of the loop\u0026rsquo;s result block to see the growing value of i with each loop:\nRelational Expressions and their Operators    Operator Expression     \u0026gt; Greater than   \u0026lt; Less than   == Equal to   \u0026gt;= Greater than or equal to   \u0026lt;= Less than or equal to   != Not equal to    More For Loop Examples Here are some examples of projects that use for loops to create complex designs. Try to determine how all three statements of the for loop work and how they create the resulting patterns for each code embedded below:\nNested For Loops Nested For Loops allow us to combine two loops that work together to create even more complex data parsing and graphical pattern drawing. Let\u0026rsquo;s learn more about how Nested For Loops work by reading on. Take a look at this first code example below. It uses two separate for loops that work independently from one another to draw a horizontal line of pink squares and a vertical line of orange squares (note that the first pink square is actually covering up the first orange square, since both are drawn at 0 X:\nIf we wanted to make a grid of squares, we could combine these two for loops into a nested for loop. We start by temporarily removing the result code from both the first and second loop, then cutting the second loop and pasting it into the result brackets of the first loop. here is what the structure of a nested for loop looks like:\nfor (create outer variable; outer test; update outer variable){ for (create inner variable; inner test; update inner variable){ repeated result block } } Now, we can use just one of the result-block codes from before, but this time, let\u0026rsquo;s use the variable x to determine each square\u0026rsquo;s X axis location and the variable y to determine each square\u0026rsquo;s Y axis location. Now, our code will look like the embedded example below, and we will have one large grid of equally-spaced squares instead of two adjacent rows!\nTo understand how these two loops operate together, we could create a nested for loop that logs data to the console. Open a new project page in the p5.js Web Editor and copy the code below into either the setup( ) or draw( ) blocks:\nfor(let i = 0; i \u0026lt;= 4; i++){ for(let j = 0; j \u0026lt;= 4; j++){ console.log(\u0026#34;Outer Loop: \u0026#34; + i + \u0026#34;:\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Inner Loop: \u0026#34; + j); } } Now look at your console. You should see the following text printed out:\nOuter Loop: 0: Inner Loop: 0 Outer Loop: 0: Inner Loop: 1 Outer Loop: 0: Inner Loop: 2 Outer Loop: 0: Inner Loop: 3 Outer Loop: 0: Inner Loop: 4 Outer Loop: 1: Inner Loop: 0 Outer Loop: 1: Inner Loop: 1 Outer Loop: 1: Inner Loop: 2 Outer Loop: 1: Inner Loop: 3 Outer Loop: 1: Inner Loop: 4 Outer Loop: 2: Inner Loop: 0 Outer Loop: 2: Inner Loop: 1 Outer Loop: 2: Inner Loop: 2 Outer Loop: 2: Inner Loop: 3 Outer Loop: 2: Inner Loop: 4 Outer Loop: 3: Inner Loop: 0 Outer Loop: 3: Inner Loop: 1 Outer Loop: 3: Inner Loop: 2 Outer Loop: 3: Inner Loop: 3 Outer Loop: 3: Inner Loop: 4 Outer Loop: 4: Inner Loop: 0 Outer Loop: 4: Inner Loop: 1 Outer Loop: 4: Inner Loop: 2 Outer Loop: 4: Inner Loop: 3 Outer Loop: 4: Inner Loop: 4 What does this tell us? It shows us that when we nest for loops, they both work together in a unique way: the outer loop starts first and completes just one run of the shared result code if its test can pass. Then, it pauses and lets the inner loop complete all of its runs until the inner loop\u0026rsquo;s test fails and, causing it to stop. Now, the outer loop wakes up and runs a second time. Once that second run is finished, it lets the inner loop run its entire series of loops again! This continues to happen until the outer loop has completely exhausted its chances to run while its test can still be passed.\nThe following logic chart breaks down the basic concept behind how a nested for loop works:\nTo better understand how a nested for loop works, play with the embedded code below by moving your mouse from left to right across the canvas. The position of your mouseX and mouseY variables determine the total number of times the inner and outer loops run, adding/subtracting more circles in groups as your mouse moves:\nHere is another example of a nested for loop. Study this example to see how it works:\n"
},
{
	"uri": "/5_integrationproject/3_documentation/",
	"title": "Documentation of Your Integrations Project",
	"tags": [],
	"description": "",
	"content": "As you wrap up your project, it is important to document your work in various ways.\n Save older versions of your code. Take picturees of you arduino circuits. Create a video of your final, working project. Create a backup of everything once you are finished.  This will help both you and your instructor with this project. This will allow your instructor to be able to see how all of your elements are integrated, and your circuits are wired without the need for you to be present and demonstrate. (which will help with prompt grading and feedback) And, should something go wrong at your final presentation, or while you are working on the project, you will have documentation of a working product, and funcitonal backups that you can restore most, if not all of your work from.\nIt is highly recommended that you share the video documentation of your product to a streaming cite such as Youtube or Vimeo so that it can be accessed and refrenced easily.\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/1_lesson_1/filters/",
	"title": "Filters",
	"tags": [],
	"description": "",
	"content": "Filters  A filter modifies a source sound by either amplifying or attenuating certain frequency ranges of that sound.   Filter types can include:  lowpass highpass bandpass lowshelf highshelf notch allpass peaking  "
},
{
	"uri": "/2_graphics/3_bugsquish/",
	"title": "Game Design using the p5.play library",
	"tags": [],
	"description": "",
	"content": "Chapter 6 This chapter will ask you to use using the p5.play.js library to build \u0026ldquo;Bug Squish!\u0026quot;, an interactive game. The following lessons will introduce you to adding the library to your project, the basics of building and controlling interactive Objects in your game (aka \u0026ldquo;sprites\u0026rdquo;), watching for and reacting to collisions between sprites, and how to group similar sprites together into Groups.\nIncluding P5.play.js in your Project For p5.play.js to work in your sketch you need to include it in your HTML file. We can use the jsDelivr website to generate a link to the P5.play library\u0026rsquo;s github source code. A link is provided for you below.\nOpen your project-folder and find the index.html file. Add this line under the first three script tags, replacing the URL in the quotes with the URL you just copied from cdnjs.com:\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/molleindustria/p5.play/lib/p5.play.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Once you have added this line, save your HTML file and head back to your \u0026ldquo;sketch.js\u0026rdquo; file. This loads p5.play.js in your sketch.\n"
},
{
	"uri": "/2_graphics/1_proceduraldrawing/3_lesson_3/",
	"title": "Graphics Assignment # 1 - Recreate Four Images",
	"tags": [],
	"description": "",
	"content": "Use the skills you\u0026rsquo;ve learned in this chapter to recreate the following four images:\n"
},
{
	"uri": "/2_graphics/2_paintapp/3_lesson_3/",
	"title": "Graphics Assignment # 2 - Paint App",
	"tags": [],
	"description": "",
	"content": "Below is an example of the Paint app assignment. Play around with it and notice the following things that are required for your project:\n Number and location of color squares What happens when you clock on the color squares What happens when you click and drag the mouse What happens when you click on the white square  "
},
{
	"uri": "/2_graphics/3_bugsquish/3_lesson_3/",
	"title": "Interactivity",
	"tags": [],
	"description": "",
	"content": "In this section, we\u0026rsquo;ll discus how to interact with your sprites and how to have them interact with each other.\n"
},
{
	"uri": "/6_resources/3_loops/",
	"title": "Loops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4_physicalcomputing/1_digital_io/3_lesson_3/",
	"title": "PC Assignment # 1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4_physicalcomputing/2_analog_io/3_lesson_3/",
	"title": "PC Assignment # 2 ",
	"tags": [],
	"description": "",
	"content": "Assignment # 2\n"
},
{
	"uri": "/4_physicalcomputing/3_serialcommunication/3_lesson_3/",
	"title": "Physical Computing Assignment # 3 - Adding Physical Contol to Bug Squish game",
	"tags": [],
	"description": "",
	"content": "Here is an example of this completed assignment\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/sample-playback-and-effects/playingsamples/",
	"title": "Playing Samples",
	"tags": [],
	"description": "",
	"content": "To play samples use with a new Tone.Player for one sound or a new Tone.Players for multiple sounds.\nTone.Player Play one sound This is an example of playing one sound with a Tone.Player object and triggering it to start with a mouseIsPressed function.\nThe variable baseURL stores the beginning part of the URL which is the same for all of our sound files. We use this variable to make our code shorter and more readable. Inside of the Tone.Player we add baseURL to the rest of the URL to complete our string.\nHere\u0026rsquo;s an example of string adding or concatenation:\n\u0026quot;cat\u0026quot; + \u0026quot;dog\u0026quot; = \u0026quot;catdog\u0026quot; \u0026quot;tree\u0026quot; + \u0026quot;hello\u0026quot; = \u0026quot;treehello\u0026quot; Other things we can do to change how Tone.Player acts are autostart, loop, and playbackRate.\nIf autostart is set to true then the sound file will play as soon as the page is loaded.\nIf loop is set to true the sound file will repeat until forever.\nplaybackRate controls the speed of the sample. Above 1 will sound higher and below 1 will sound lower.\nClick on the canvas to play.\nTone.Players Play multiple sounds We used Tone.Players when we want to collect multiple samples to play.\nTo define which sounds to play we create an object with multiple file paths, each with a unique name to call the sound up by later. You can think of this name as a type of variable that is inside of an object.\nTrigger sounds There are multiple ways of triggering and controlling sounds. Below we look at keyIsDown, buttons, and sliders.\nkeyIsDown Since we have multiple sounds to play now we can use keys on the keyboard to trigger them. To do that we use the p5 function keyIsDown.\nStarting the sounds To get each specific sound to play we use a special syntax: players.get(\u0026lsquo;samplename\u0026rsquo;). In this case we do either players.get(\u0026lsquo;water\u0026rsquo;) to select the water sound or players.get(\u0026lsquo;bees\u0026rdquo;) to play the bee sound. Then we call .start() to play those sounds.\nUsing buttons Instead of using keyIsDown we can create buttons to trigger sounds. The below example is the same as the previous one just now we use buttons.\nWe create a button with the p5 function createButton(). The parameter is a string that decides the button label. Name it something that describes what your button does.\ncreateButton('button label') button1.position(x, y) determines the button location.\nbutton1.mousePressed() calls a function that we define below. Inside of this function put any code that you want to run when you click the button.\nUsing sliders To change an aspect of our sound while it is playing we can use a slider. To make a slider in p5.js use createSlider().\nSyntax createSlider(min,max,[value],[step]) Parameters  min - minimum value of the slider max - maximum value of the slider value - default value of the slider step - step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)  To get the current value of the slider: slider.value()\nLabeling your sampler To label the sampler we use the text() function.\nSyntax text(str,x,y,[x2],[y2]) Parameters  str - the alphanumeric symbols to be displayed x - x-coordinate of text y - y-coordinate of text  "
},
{
	"uri": "/1_introtocoding/3_reuseitwithmodularcode/",
	"title": "Reuse it with modular code",
	"tags": [],
	"description": "",
	"content": "Chapter 3 The following lessons will focus on introducing students to the concept of modular code in order to build more advanced projects. Topics include creating and modifying your own functions, understanding the relationship between Classes and Objects, and the benefits of Object-Oriented Programming.\nWWhile completing these lessons, be sure to check out additional examples and extended readings in the Resources section to build a stronger understanding of these concepts.\n"
},
{
	"uri": "/4_physicalcomputing/3_serialcommunication/",
	"title": "Serial communication",
	"tags": [],
	"description": "",
	"content": "The following lessons will focus on adding serial communication to the completed \u0026ldquo;Bug Squish!\u0026rdquo; game from the previous chapter, allowing for control of your game from an Arduino.\n"
},
{
	"uri": "/3_audio/",
	"title": "Sound (Tone.js)",
	"tags": [],
	"description": "",
	"content": "Unit 3 The following lessons and assignments will focus on using your understanding of coding basics to integrate sound into your projects using the tone.js library. Topics covered include basic understanding of digital signal processing and the web audio signal chain, creating sound file players, synthesizers, and audio effects processors, and triggering sonic events in games and graphics-based projects.\nWhile completing these lessons, be sure to check out additional examples and extended readings in the Resources section as well as the tone.js library reference website to build a stronger understanding of these concepts.\nIncluding Tone.js in your Project For Tone.js to work in your sketch you need to include it in your HTML file.\nHead to cdnjs.com and search for Tone.js. Find a URL to the minified (.min) version of the library, and copy it to your clipboard.\nNext, open your project-folder and find the index.html file. Add this line under the first three script tags, replacing the URL in the quotes with the URL you just copied from cdnjs.com:\n\u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/tone/13.8.9/Tone.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Once you have added this line, save your HTML file and head back to your \u0026ldquo;sketch.js\u0026rdquo; file. This loads Tone.js in your sketch.\n"
},
{
	"uri": "/3_audio/1_sampler/3_lesson_3/",
	"title": "Sound Assignment # 1 - Multiplayer with Effects and Controls",
	"tags": [],
	"description": "",
	"content": "Here is an example of a solution for Sound Assignment # 1.\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/3_lesson_3/",
	"title": "Sound Assignment # 2 - Multiple Synthesizers, Multiple Sequences",
	"tags": [],
	"description": "",
	"content": "Sound Assignment # 2 Result\n"
},
{
	"uri": "/3_audio/3_soundsinbugsquish/3_lesson_3/",
	"title": "Sound Assignment #3 - Adding Sound Events to BugSquish!",
	"tags": [],
	"description": "",
	"content": "Result code goes here\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/2_lesson_2/sound-effects-sequencing/",
	"title": "Sound effects with sequencing examples",
	"tags": [],
	"description": "",
	"content": "View slides Bubbles with sound   See HackPact for inspiration   Sound Effect  Massive impact starter Rain on a tin roof starter\n Sirens starter\n"
},
{
	"uri": "/3_audio/3_soundsinbugsquish/",
	"title": "Sprite Collisions w/Sound!",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Everything on a chapter page will be centered.\n"
},
{
	"uri": "/1_introtocoding/1_codingbasics/3_lesson_3/",
	"title": "Storing Things in Code - Variables",
	"tags": [],
	"description": "",
	"content": "So far, our code has used concrete, static data to create visuals. However, we can use updatable, changing data in order to modify our projects while they are running in order to make them more dynamic. To do this, we use variables. A variable is a container that stores a single value in the memory or our code so that we can use it at a later time, in multiple places throughout our code. This make variables more flexible than fixed, concrete values.\nTake a look at the embedded code below:\nIn this code, we\u0026rsquo;ve drawn two polygons to the screen. The teal square is built using four fixed values as arguments; its location, width, and height will never be changed unless we stop the code, edit the values, and rerun the program. The pink rectangle uses two variables: \u0026ldquo;rectWidth\u0026rdquo; and \u0026ldquo;rectHeight\u0026rdquo;.\nMaking Variables To make a variable, we start by declaring a name for the container. In our code, we\u0026rsquo;ve declared both \u0026ldquo;rectWidth\u0026rdquo; and \u0026ldquo;rectHeight\u0026rdquo; at the very top of our code by first typing the keyword let. This is synonymous to asking our code to let \u0026ldquo;rectWidth\u0026rdquo; contain a specific value in its memory, so that we can refer to it by that name in our project from now on. We\u0026rsquo;ve done this outside of either the setup( ) or draw( ) blocks, which means that we\u0026rsquo;ve declared these variables globally and they can be used/accessed anywhere in our code(we\u0026rsquo;ll discuss this in detail at the bottom of the page).\nNext, we need to assign an initial value to each variable. This is also called initialization, or init for short. This step can be done immediately after declaring a variable:\nlet rectHeight =50; or at a later time in a function block:\nfunction setup(){ rectHeight = 50; } Take note: unlike in math operations, the equals sign means assignment, NOT equality. In our example, rectHeight gets assigned a value of 50, but it is not equal to 50.\nIt\u0026rsquo;s important to note a few things about making variables:\n You can only declare a variable once. If you try to declare it more than once, your code will wipe the previous value inside of your variable from its memory. For instance, the following code is an issue:  let xValue=1; function setup(){ let xValue =21; } because the original value of \u0026ldquo;xValue\u0026rdquo;, which was 1, has now be replaced with 21.\n You should not have two separate variables that share the same name. The same code example above would also cause an issue due to the fact that you are attempting to declare two separate variables that share the same name. While this sort of thing is POSSIBLE to do, it makes for a very confusing code. This has to do with the scope in which both variables were declared (more on this below). If you are declaring a number of variables without immediately initializing them, you can save some vertical space in your code editor by declaring them all on the same line while using a single let keyword. The example below declares four different variables all on one line, separated by commas:  let circleX, circleY, speed, jumpHeight; Fixed Values vs. Changeable Values Variables can contain fixed values as well as changeable values. In our example, rectHeight contains a fixed value of 50 inside of it (which happens at the very top of our code, above the setup( ) function block), allowing us to use the value of 50 in any location we type the phrase \u0026ldquo;rectHeight.\u0026rdquo; rectWidth, however, contains the result of a function called random(), which generates a random number between its two arguments each time it is run. Since it only runs inside of the setup( ) block, we need to hit the rerun button in the embedded Result panel in order to get a different width for the pink rectangle. We can easily modify our code so that random() spits out a new value and updates our variable with every frame of the draw loop:\nSystem Variables The p5.js library includes a series of built in variables that allow you to monitor the status of certain aspects of your device and use them as ways to interact with your projects. These variables are known as System Variables.\nTake a look at the embedded code below to see an example of some common System Variables in p5.js:\nSince every variable in this example is a System Variable, we cannot declare or initialize them in our code like we would with custom-built variables. Their declaration occurs inside of the larger p5.js library, and their initialization/updating occurs differently based on the variable. width and height are variables that hold the current size dimensions for the project\u0026rsquo;s canvas and are initialized when the createCanvas() function is called. Open this code on CodePen or copy it into your P5 Web Editor, then change the argument inside of createCanvas() to see how updating those values also updates these variables.\nThe values inside of mouseX and mouseY are updated every time you move your mouse cursor across the canvas. Using these variables, you can update the location of an object (like we\u0026rsquo;re doing to one corner of the triangle) or use their current values in a calculation to generate changeable arguments.\nCommon System Variables in p5.js Here are some commonly used System Variables found in the p5.js JavaScript library. Remember - we can read these variables, but we cannot reassign them:\n   Variable Use     mouseX current location of mouse on the canvas\u0026rsquo; X axis   mouseY current location of mouse on the canvas\u0026rsquo; Y axis   pmouseX previous location of mouse on the canvas\u0026rsquo; X axis   pmouseY previous location of mouse on the canvas\u0026rsquo; Y axis   key current key pressed (ASCII keys only)   keyCode current special key pressed (ENTER, UP_ARROW, etc.)   width current width of the canvas in pixels   height current height of the canvas in pixels    Boolean System Variables\n   Variable Use     mouseIsPressed boolean - contains \u0026ldquo;true\u0026rdquo; if mouse pressed, \u0026ldquo;false\u0026rdquo; if not   keyIsPressed boolean - contains \u0026ldquo;true\u0026rdquo; if any key pressed, \u0026ldquo;false\u0026rdquo; if not    Global Scope vs. Local Scope Depending on our project, we may need the data inside of a variable to be accessible across our entire code so that we can use/read/change it in every function. In some cases, however, we may only need a variable to exist within a specific function or section of our code. This determination of how widely or narrowly accessible data is available throughout our code is known as scope.\nIn all of our examples so far, we\u0026rsquo;ve been declaring our variables outside of any of our function blocks (the ones we\u0026rsquo;ve used most often are draw( ) and setup( )), mainly at the very top of our code. This process is known as global declaration, and these variables can be used/read/changed anywhere and everywhere in our code. In the example below, the variable \u0026ldquo;circSize\u0026rdquo; is declared with the keyword let outside of any function block or function argument, which allows us to initialize it in the setup( ) block, change it in the draw( ) block, and then print it to the console on every click in the mousePressed( ) block.\nWe also have a second variable, squareSize, that is declared inside of the brackets of the mousePressed() function. This is known as local declaration. Because of this, \u0026ldquo;squareSize\u0026rdquo; can only be used and modified inside of this function. To demonstrate this, copy the entire code from the embedded editor above and paste it into a new sketch on the p5.js Web Editor page. Uncomment the code on line 33, rerun the sketch, and watch for an error in the console. You should see the following text:\nThis is a common error related to using variables in a project, and in this instance, it is caused because we are trying to read the value of \u0026ldquo;squareSize\u0026rdquo; form inside the draw( ) function block. Our code then tells us that it doesn\u0026rsquo;t understand what \u0026ldquo;squareSize\u0026rdquo; is because it hasn\u0026rsquo;t been properly defined, even though we declared and initialized it. This variable\u0026rsquo;s local scope won\u0026rsquo;t allow us to do anything with it outside of mousePressed( ). Try cutting line 33 and pasting it into mousePressed( ) on any line after we declare it, and both console.log() functions will now work properly.\nThere are a number of reasons why you would want to declare a variable locally instead of globally, but many of them depend on specific circumstances. As we progress through this unit and others, we\u0026rsquo;ll call attention to instances where we choose local vs. global and explain why this choice is sometimes necessary.\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/sample-playback-and-effects/effects/",
	"title": "Adding effects",
	"tags": [],
	"description": "",
	"content": "Effects in Tone.js alter the sound is some way. They can effect the timbre or rhythm of the sound.\nMaking connections  toMaster()  sends the sound directly to your speakers if you are missing toMaster() you will not hear anything   connect()  Sends the sound to an effect before it goes to the master    Every effect has a range that the effect can be applied to the sound, also called its wet value.\nBelow are some effects you can use for your Sampler with effects assignment. More information of other effects can be found here.\nReverb Reverb is the persistance of a sound that continues after the original sound has ceased. It is made up of many echos bouncing off the walls of a space and gives us cues to the size of that space. If you have ever been in a very large room, think church, stadium etc; and heard your voice echo around it, this is reverb.\nParameters Roomsize - The amount of time for the sound to decay.\nDelay A delay effect records a sound into a buffer and plays it back after a certain period of time.\nParameters  delayTime - the time between consecutive echos. feedback - The amount of the effected signal which is fed back through the delay.  Distortion Gives sound a \u0026ldquo;fuzzy\u0026rdquo;, \u0026ldquo;growling\u0026rdquo;, or \u0026ldquo;gritty\u0026rdquo; tone, think electric guitar.\nParameter distortion - The amount of distortion (nominal range of 0-1)\nTremolo Tremolo is the variation in amplitude of sound achieved through electronic means.\nParameters  frequency - the rate of the effect depth - the depth of the effect  "
},
{
	"uri": "/2_graphics/3_bugsquish/2_lesson_2/animations-images/",
	"title": "Animations &amp; Images",
	"tags": [],
	"description": "",
	"content": "Adding files into a P5 project The first thing we have to do before adding an image to our sprite is to include it inside of P5. This can be done in two different ways, but they function almost identically.\n  Looking at the examplel on the previous page, we can see the photoDirectory varible contains a string for a URL. This is the location on the internet where the photos are located. If your files are located on a specefic server, you can provide a link to them and P5 will find the files and add them into your project. (more details later) If you use this method, you will need to store the URL as a string in a variable as shown on the previous page.\n  You can also add you own locacl images from your own device onto P5\u0026rsquo;s server in the steps detailed below.\n Open the file editor  click on the arrow next to \u0026ldquo;Sketch Files\u0026rdquo; and select \u0026ldquo;Create Folder\u0026rdquo;  Give this folder a name using the pop up window. For this example, we went with \u0026ldquo;images\u0026rdquo;. You will now see your folder appear inside of the file editor. Clock the small triangle next to your new folder and select \u0026ldquo;upload file\u0026rdquo;. You can then use the pop-up window to drag-and-drop your image, or manually upload it by serching your device.  you will now see the file inside your folder like in the image below. You can click the triangle by your file to rename it or delete it as needed.     The second method tends to be a little more stable than method 1 because if the server location chages at all in the previous method, P5 will be unable to locate the images and the project will break. The downside is that each P5 account has a limited amount of storage, so you will have to be careful not to use all of this space. This process works the same for images, sound files, and video files.\nPutting an image onto a sprite Now that p5 knows where to find the image, you need to have th erogram load the image into your project. To do this, we need to call function preload(). This function\u0026rsquo;s purposes is to load any external assets prior to the setup function. This will prevent the code from trying to perform a task with an asset that isn\u0026rsquo;t actually in the project yet. Not doing this in preload() will cause multiple errors.\nTo load an image, you first need a variable to store the image in your code. You then assign the variable the result of funciton loadImage(). The argument for this function is the file pathway to where you iamge is located on the internet. Using the examples from above, the line would look like this:\nlet myImage;\nfunciton preload(){ myImage = loadImage(images/test1.png); }\nNow we can use this image in our code. Try replacing the default value of 220 insode of the background() function and see what happens.\nTo add the image to the sprite, first we must make a sprite. Then we can simply way sprite.addAnimation(\u0026lsquo;name\u0026rsquo;, files); like in the example below.\nWe are using addAnimation right now because it will make our transition to adding multiple images much easier later on.\nYou must give each animation a name so that you can refer to it whenever you need ot adjust a parameter of the animation or change it. You then have to tell P5 which image file(s) you want to use.\nChanging the image on a sprite To change the image on a sprite, it is farly simple. First you must repeat the process of making a seperate animation for the new image. Be sure to give it a different name from your first image.\nNext you will need to set up a conitional statement that will tell your code when to change the image. For this example, We will change the image if the mouse is pressed.\n[example here]\nIn the example, we used the sprite.changeAnimation() method and specefied the name of the new animation as teh argument. This process will be identical whether your animation has one or multiple images.\nAnimating a sprite with multiple images Once you can load an image onto a sprite with .addAnimation90, you are close to making this an dynamic animation with multiple images. In order ot do this, you will have to tell p5 to load all of the images needed in your project. This is where hosting the images on a seperate server and using forloops, like in the example below, can save you a large amount of typing.\nOnce you have loaded all of your images into your peoject, the next step is to add them into the .addAnimation() method. simpley type out the name of the variables storing the images in the order that you want them to appear in your animation. (You can repeat images if needed) P5.play will then cycle through the images sa the draw function repeats it\u0026rsquo;s loop.\nHere is an example of adding a looping animation to a sprite and coding for interactions from mouse and key presses:\n"
},
{
	"uri": "/1_introtocoding/1_codingbasics/4_lesson_4/",
	"title": "Everything is a number - Math",
	"tags": [],
	"description": "",
	"content": "Adding mathematical calculations to our code allows us to create projects that intelligently adapt to changes and change on their own. We can also use math equations to create basic animations and cycles of change for any element in our project.\nMany of the same mathematical operators that we commonly encounter in the world are used in JavaScript, but there are some exceptions. Here is a quick chart of common math operations and their equivalent symbols in JavaScript:\n   Symbol Operation     + Addition   - Subtraction   * Multiplication   / Division   % Modulo    Using Math in Code Lets look at a few examples of where we can use simple math in our code. In the example below, we\u0026rsquo;ve created four rows of squares. Each square is placed on the canvas based on the result of a different mathematical equation to determine its X and Y coordinate. Take a look at each grouping of rect( ) functions to see how we use the same \u0026ldquo;rectX\u0026rdquo; and \u0026ldquo;rectY\u0026rdquo; variables, but return different location results based on the various equations we code for:\nWe can also run these same equations against a variable that isn\u0026rsquo;t a fixed, static value. In the example below, move your mouse left and right across the canvas to watch how the squares update their location on the X axis. Take a look at the first and third row: their X locations are determined through addition or subtraction, so they are simply shifting their position across the canvas. Since the second and fourth rows determine their X position through multiplication and and division, we are scaling their position.\nMath for Animation In order to animate a shape or image, we will need to replace one or more of its fixed location arguments with a variable, and then write a line of code that causes that variable to update with a new, changed. This last action will need to repeat continuously at a rate fast enough for our eyes to perceive the location change as a smooth motion. The draw( ) block is a perfect place to add this new code since it loops the code inside of it at a rate of 60 frames per second.\nTake a look at the two examples embedded below. The first code produces a PacMan character that is fixed in place, while the second example produces a PacMan that is gradually moving across the screen as the \u0026ldquo;pacX\u0026rdquo; variable gradually updates with a growing value:\nThe math works like this: each time the draw( ) block loops, we take the initial value inside of pacX and replace it with the result of the equation pacX - 2. This causes the value inside of pacX to gradually decrease and push Pac-Man off the left-hand side of the canvas. Open your console to see the result of this equation printed out for you.\nThis second example makes it look as if Pac-Man is stretching across the entire screen instead of moving his entire body along the entire canvas. This is because with each new loop of the draw( ) block, we\u0026rsquo;re drawing a new Pac-Man that is located two pixels to the left of the previous one. All of these Pac-Man copies overlap on top of each other, which makes it look as if he\u0026rsquo;s stretching. In order to delete the old Pac-Man copies, make sure to call the background( ) function at the very beginning of your draw( ) block. This essentially \u0026ldquo;clears\u0026rdquo; the screen before drawing our newly-moved yellow friend. The example below shows this in action, and also adds a new variable called speed to stand in for the rate at which Pac-Man moves across the screen:\nOnce you are comfortable with the process of adding to or subtracting from a variable, we can shorten the equations we used above with the help of some compound symbols. The chart below shows the common math operations we can perform on variables and some sort hand symbols we can use to create the exact same equations:\n   Compound Symbols Operation Example     += X = X + value X += value;   -= X = X - value X -= value;   *= X = X * value X *= value;   /= X = X / value X /= value;   %= X = X % value X %= value;    Cyclical Animations with Modulo In order to have a cyclical animation pattern, we would need to produce a cycling series of numbers and use that cycle as position data for our shape. There are very few processes in p5.js that loop in a cyclical fashion, so we\u0026rsquo;ll need to get creative with how we create one.\nRead this article on a mathematical process known as modular arithmetic. Using the modulo operator (%), we can take a series of increasing numbers and divide them by a fixed number (the modulus) in order to create a pattern of repeating numbers. Lets tap into the power of the looping draw( ) block and use the frameCount variable (which updates to provide the current count of draw( ) block loops) as our dividend. Mathematically, it looks like this:\nCurrent Frame Count % Total Number of Pixels We Want to Move = Cyclical Pattern\nThe embedded code below shows this process in action. Notice how we are reassigning the value inside of the rectX variable to be the result of frameCount mod 300. This produces a repeating pattern between 0 and 299 (one less than the modulus). The rest of the code draws a new purple square at each new updated position, traveling to position 299 on the X axis before teleporting back to 0.\nIf you want to slow down the speed of the square\u0026rsquo;s travel, call the frameRate( ) function in your setup( ) block and give it a number that is less than 60 in order to slow down the looping rate of the draw( ) block.\n"
},
{
	"uri": "/5_integrationproject/4_presentation/",
	"title": "Final Presentation",
	"tags": [],
	"description": "",
	"content": "This is it. The final part of the Programming Digital Media course. It is hard to believe just how much material we covered over these weeks.\nThe final assignment is to present your final project for your class and your instructor. The presentation shouldn\u0026rsquo;t be too long, but be sure to cover the following material:\n Describe your project. How you implemented material from the graphics unit. How you implemented material from the audio unit. How you implemented material from the physical computing unit. Any unexpected challenges you may have run into. Give a short demo of your project for the class to see. Be sure to save a little time in case any one has any questions!  Remember, you should document your project as detailed in the previous page. If technical difficulties should arise, you could use that video as a demonstration of your code.\nThank you for all your hard work throughout the course, and best wishes as you keep learning, and hopefully keep coding!\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/1_lesson_1/noise/",
	"title": "Noise",
	"tags": [],
	"description": "",
	"content": "Noise  Tone.Noise produces different colors of noise. Each has a different sound, covers a different frequency range, and is used for different purposes. There are other colors of noise that tone doesn\u0026rsquo;t implement that are good to know about.   Most often used types  white brown pink   click left arrow for noise starter\n"
},
{
	"uri": "/6_resources/4_p5anddrawing/",
	"title": "p5 and Drawing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/4_physicalcomputing/",
	"title": "Physical Computing (Arduino)",
	"tags": [],
	"description": "",
	"content": "Chapter 6 The following lessons and assignments will introduce students to the practice of Physical Computing using the Arduino platform. While code for the Arduino is not written in JavaScript, the syntax and structure of basic coding concepts covered in previous chapters will carry over to these lessons with only minor changes required. Topics covered include basic understanding of electrical signals and components for building circuits, analog and digital input and output into an interactive circuit, understanding differences between JavaScript and Arduino coding, and how to get an Arduino to communicate with a web-based project.\nWhile completing these lessons, be sure to check out additional examples and extended readings in the Resources section as well as the lessons and example codes found on the Arduino website to build a stronger understanding of these concepts.\n"
},
{
	"uri": "/2_graphics/3_bugsquish/3_lesson_3/user-based-interactivity-mouse-keyboard-events/",
	"title": "User-Based Interactivity (Mouse/Keyboard Events)",
	"tags": [],
	"description": "",
	"content": "Bringing it All Together Here is an example of an advanced game that features animations, movement through key and mouse interaction, and collisions between groups and single sprite characters:\n"
},
{
	"uri": "/6_resources/5_basicshapes-/",
	"title": "Basic Shapes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/1_introtocoding/1_codingbasics/5_lesson_5/",
	"title": "Chapter 1 Review &amp; Assignments",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Review "
},
{
	"uri": "/2_graphics/3_bugsquish/4_lesson_4/",
	"title": "Graphics Assignment #3 - Bug Squish game",
	"tags": [],
	"description": "",
	"content": "Here is a working example of the Bug-Squish assignment. Notice the following items that need to be present in your version:\nThere is a starting, playing, and ending state for the game. Instructions are given in the start state, and the score is given in the end state.\n A timer is given to show how long is left before the game ends Each sprite behaves in the same way:  Moves in its specific direction (Up, Down, Left, or Right) Is animated with the walking bug images Reacts to being clicked on (movement stops, animation changes, score goes up, leaves the screen) When all bugs are squished, more appear.   A specific background is present  In order to achieve this, you will need to utilize all of the skills we have learned so far: conditionals, for loops, custom functions, variables/arrays, as well as how to create groups of sprites.\n"
},
{
	"uri": "/5_integrationproject/",
	"title": "Integrations Project",
	"tags": [],
	"description": "",
	"content": "The remainder of the course will focus around your final comprehensive project. This project will be one that you design and create from start to finish. However there are a few rules and guidelines to go over before you begin working.\nFirst, Your project has to have the following elements, which integrate all of the units gone over so far into one cohesive product:\n At least one sprite must be on the screen and be interactive in some way At least one image must be utilized in the project Some sort of audio must be present as a soundtrack and/or playback P5 must take input from an Arduino with a sensor in order to effect some element of the project P5 must output to an arduino in order to affect some physical element, such as an LED. All code must be properly formatted, documented, and functional  While not required, having some processing of the audio via Tone.js is highly recommended to help polish your soundtrack.\nWhile not specified, elements from the ‘Basics of Coding’ such as conditionals, variables, loops, custom functions, etc. will more than likely be in your project. If your project is missing one of these key elements, make sure that you are not forgetting something.\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/2_lesson_2/rhythm-and-tuning/",
	"title": "Rhythm and tuning",
	"tags": [],
	"description": "",
	"content": "View slidesTone-rhythm source\n how do you match a rhythm and pitch array together?  const mariaDurations = ['8n', '8n', ['2n', '4n'], '8n', '4t', '4t', '4t', '4t', '4t', '4t', '8n', ['2n', '4n'], '8n', '8n', '8n', '8n', '8n', ['4n', '8n'], '8n', '8n', '8n', '8n', '8n', '4n', '4n', ['2n', '4n', '8n'], '8n', '8n', ['2n', '4n'], '8n', '4t', '4t', '4t', '4t', '4t', '4t', '8n', ['2n', '4n'], '8n', '8n', '8n', '8n', '8n', ['4n', '8n'], '8n', '8n', '8n', '8n', '8n', '4n', '4n', ['2n', '4n', '8n']]; const mariaPitches = [\u0026quot;Eb4\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;Eb4\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;C5\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;C5\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;G4\u0026quot;, \u0026quot;F4\u0026quot;, \u0026quot;Eb4\u0026quot;, \u0026quot;F4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;Ab4\u0026quot;, \u0026quot;G4\u0026quot;, \u0026quot;F4\u0026quot;, \u0026quot;Eb4\u0026quot;, \u0026quot;F4\u0026quot;, \u0026quot;Eb4\u0026quot;, \u0026quot;G4\u0026quot;, \u0026quot;Eb4\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;Eb4\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;C5\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;C5\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;Eb5\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;C5\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;Eb5\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;C5\u0026quot;, \u0026quot;Bb4\u0026quot;, \u0026quot;D5\u0026quot;, \u0026quot;Eb5\u0026quot;, \u0026quot;F5\u0026quot;];  option 1 - manually  {\u0026quot;time\u0026quot; : 0, \u0026quot;note\u0026quot; : \u0026quot;C3\u0026quot;, \u0026quot;velocity\u0026quot;: 0.9}, {\u0026quot;time\u0026quot; : \u0026quot;0:2\u0026quot;, \u0026quot;note\u0026quot; : \u0026quot;C4\u0026quot;, \u0026quot;velocity\u0026quot;: 0.5}  or Tone-rhythm   Tone-rhythm ex: starter\n Scales  A set of notes in a given order ex c major scale  C D E F G A B   F major scale  F G A Bb C D E   scale maker defines these scales for us   Scale Example starter\n Tunings Tune.js\n Control Patterns  Tone.CtrlPattern  used in Tone.Pattern run through an array of notes in a specific order   Tone.CtrlMarkov  markov chain  a sequence of possible events in which the probability of each event depends only on the state attained in the previous event   can algorithmically switch between musical phrases   Tone.CtrlRandom  return a random number same as p5\u0026rsquo;s random()   Tone.CtrlInterpolate  interpolate between a list of numbers similar to p5\u0026rsquo;s map()     Pattern / tuning example starter\n "
},
{
	"uri": "/6_resources/4_p5anddrawing/sprites-images-sprite-sheets/",
	"title": "Sprites Images &amp; Sprite Sheets",
	"tags": [],
	"description": "",
	"content": "Cutting a Sprite Sheet Here is a link to an online tool for cutting out individual animation frames from a Sprite Sheet:\n https://ezgif.com/sprite-cutter  "
},
{
	"uri": "/9_presentations/pres/",
	"title": "Sprites Images &amp; Sprite Sheets",
	"tags": [],
	"description": "",
	"content": "Cutting a Sprite Sheet Here is a link to an online tool for cutting out individual animation frames from a Sprite Sheet:\n https://ezgif.com/sprite-cutter  "
},
{
	"uri": "/3_audio/2_synthsandmusic/1_lesson_1/lfo/",
	"title": "LFOs",
	"tags": [],
	"description": "",
	"content": "LFO (Low Frequency Oscillator) starter\n"
},
{
	"uri": "/6_resources/6_text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/6_resources/7_soundandmusic/",
	"title": "Sound and Music",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/6_resources/8_arduino-/",
	"title": "Arduino",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/6_resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/9_presentations/",
	"title": "Presentations",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/9_presentations/pres2/",
	"title": "pres 2",
	"tags": [],
	"description": "",
	"content": "Hello world! This is my first slide.\n hellooofadfasdf this is a slide\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/sample-playback-and-effects/",
	"title": "Sample playback and effects",
	"tags": [],
	"description": "",
	"content": "Here we learn to playback audio files and manipulate them with effects.\n"
},
{
	"uri": "/3_audio/2_synthsandmusic/1_lesson_1/synth-tour/",
	"title": "Synthesizer tour",
	"tags": [],
	"description": "",
	"content": "View slidesGetting presets presets\nSimple Synths Synth Preset - Alien Synth   type\n fatsine4  prefix the basic types with “fm”, “am”, or “fat” to use the FMOscillator, AMOscillator or FatOscillator types. sine, square, triangle, or sawtooth. number of partials      from FatOscillator docs\n docs count  number of detuned oscillators   spread  detune spread between oscillators   The effect of modulation here is timbral not control    Example  Preset - Steelpan  type fatcustom  osc type + custom partials partials represented as an array each number is the gain of a partial      PolySynth  Make any synth polyphonic play more than one note at a time! example   MonoSynth   everything triggered at the same time FilterEnvelope, sim to ScaledEnvelope but with musical values  see: FrequencyEnvelope docs parameters only noticeable with longer amplitude envelopes baseFrequency - min octaves - max      DuoSynth   vibratoAmount vibratoRate harmonicity  ratio between two voices, 1 - 2 1 - no change 2 - an octave change   portamento  glide time between notes, like a slide on a guitar      AMSynth  Amplitude Modulation example we have less control over this than when we built it ourselves   FMSynth  Frequency Modulation can make interesting effects for games     modulationIndex amount of the modulation ratio of the frequency of the modulating signal (mf) to the amplitude of the modulating signal (ma) – as in ma/mf.   NoiseSynth  MetalSynth  FMosc amplitude env filter Resonance  The frequency of the highpass filter attached to the envelope      MembraneSynth  make a kickdrum pitchDecay  length of frequency envelope frequency.exponentialRampToValueAtTime   octaves  The number of octaves the pitch envelope ramps.      "
},
{
	"uri": "/6_resources/4_tate-tonestuff/instruments/",
	"title": "Synthesis",
	"tags": [],
	"description": "",
	"content": "Here we learn about synthesizer instruments and how to trigger them.\n"
},
{
	"uri": "/6_resources/4_tate-tonestuff/",
	"title": "tonejs",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Documentation Don\u0026rsquo;t forget to check google classroom for documenation on Tone.js.\nTone General Rules and Instrument Docs\nTone Effects Documentation\n"
},
{
	"uri": "/cool-test/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "test test Unit 3 Overview:\nThis unit aims at introducing students to the engineering design process and involving them in creative problem solving.\nExpected Lesson Duration:\n210 to 270 minutes\nNext Generation Science Standard(s) Addressed:\nOutcomes/Objectives:\nLearn how design impacts product performance.\rUnderstand the difference in an innovation and an invention\nIdentify and describe the parts of the engineering design process.\nUse the engineering design process to solve the problem.\rEmploy the use of data collection and analysis to help solve the problem\nExplain the reasons for their selected designs and material choices.\nRelevance/Rationale/Explorations and Extensions:\nThe engineering design process is a highly involved, iterative set of steps that guide students through high-level problem solving. As an iterative process, the steps are often repeated in varying order. It is often compared to the scientific method, and tends to be as fluid as the method in its implementation. It is important to help students understand that, just like the scientific method, the engineering design process is not a cookie-cutter framework to be copied from each problem to the next. It is, instead, an iterative venture in which engineers approach the problem from multiple angles and frames of mind.\nAssessment Criteria for Success:\nContent knowledge, student knowledge, and appropriate resources are aligned to instructional outcomes. Student learning will be assessed throughout the lesson via discussion based questions, presentations, lab report and quizzes. Students will have successfully met the outcomes when fundamental questions about the importance of work ethic, teamwork, and communication as it pertains to engineering can be observed through their own work and their peers\u0026rsquo; work.\nModifications/Accommodations and Access for All:\nReflections:\nTo be completed upon the end of unit.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Programming Digital Media",
	"tags": [],
	"description": "",
	"content": "Course Description and Objectives Course objectives, costs, general schedule, etc: programming-digital-media.pdf Programming Digital Media introduces a broad array of topics related to digital media through project oriented programming of graphics, audio, and hardware applications. The motivation for this course is to provide a basic introduction to comp uter programming using subjects that are relevant or appealing to students who are new to technological fields of study, with little to no prior programming experience. The course is presented in five segments, introducing coding, covering three distinct areas in digital media, plus a final integration project of these areas. There is a strong emphasis on computer programming tasks throughout, and the hands-on exercise of digital media tools in class is required. After an introduction to coding concepts, t he first media topic introduces real-time graphics rendering and user interaction. The second introduces sound design . The third introduces basic electronics and physical computing. Finally, communication mechanisms are used allowing the disparate elements of graphics, sound, and hardware to be composed into interactive projects.\nanother\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/iframe/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": "test\n"
}]