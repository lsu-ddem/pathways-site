<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Digital Media on Educational material for LSU Programming Digital Media</title>
    <link>/</link>
    <description>Recent content in Programming Digital Media on Educational material for LSU Programming Digital Media</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding Sound Events to Games: Sound File Playback</title>
      <link>/3_audio/3_soundsinbugsquish/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/3_soundsinbugsquish/1_lesson_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Arduino Setup</title>
      <link>/4_physicalcomputing/arduino-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/arduino-setup/</guid>
      <description>Arduino must first be setup on your computer.
https://create.arduino.cc/projecthub/Arduino_Genuino/getting-started-with-arduino-web-editor-on-various-platforms-4b3e4a?f=1
 Install Arduino Create Agent for your Browser https://github.com/arduino/arduino-create-agent Load Basics: Blink Choose your Board upload the sketch  Once this works, you are ready to go forward.</description>
    </item>
    
    <item>
      <title>Basic &amp; Advanced Shapes</title>
      <link>/2_graphics/1_proceduraldrawing/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/1_proceduraldrawing/1_lesson_1/</guid>
      <description>Drawing Basic Shapes p5.js allows us to create basic shapes with the use of the following functions:
 ellipse( ) - circles, ovals rect( ) - rectangles, squares triangle( ) - all triangles arc( ) - portions of circles/ovals  Each shape function requires a different set of arguments to be added when called. Typically, the first two arguments dictate the X and Y coordinate of a point of the shape&amp;rsquo;s placement on the canvas, while the following arguments dictate the shapes size:</description>
    </item>
    
    <item>
      <title>Building a sequence</title>
      <link>/3_audio/2_synthsandmusic/2_lesson_2/buildingasequence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/2_lesson_2/buildingasequence/</guid>
      <description>Sequencing notes To use any sequencing functions Tone.Transport() must be started.
Parameters  start stop toggle - go between start and stop seconds - get current position in seconds position - get beats:bars:sixteens bpm - beats per minute  Examples Understanding Sequences Modifying a Sequence During Performance Removing and Replacing Patterns in the Same Sequence </description>
    </item>
    
    <item>
      <title>Code that does a thing - functions</title>
      <link>/1_introtocoding/3_reuseitwithmodularcode/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/3_reuseitwithmodularcode/1_lesson_1/</guid>
      <description>How Functions Work So far throughout this course we have been utilizing various functions such as setup(), draw(), ellipse(), etc. You may have noticed a few things in common between each of these.
Functions cals are indicated by the function name followed by a set of parentheses; such as background(). At their core, functions can take in certain values and utilize them to perform a task, or return a new value.</description>
    </item>
    
    <item>
      <title>Computers Making Choices - Conditionals</title>
      <link>/1_introtocoding/2_makingthings_happen/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/2_makingthings_happen/1_lesson_1/</guid>
      <description>Creating a Test Computers are extremely powerful machines, but without our help, they cannot make choices and decisions on their own. In order to make our web projects smarter and more interactive, we need to first learn how to design tests and reactions that computers can understand.
A Conditional is a statement that tells our code to perform certain actions based on whether a test we devised has been passed or failed.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/1_introtocoding/1_codingbasics/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/1_lesson_1/</guid>
      <description>Let&amp;rsquo;s get started! In this first example, we&amp;rsquo;ll cover the basics of text-based coding in the JavaScript language.
Head to the P5.js Web Editor, sign up for a personal account, and open a new File. You&amp;rsquo;ll be presented with a new editor window that displays the code found in your &amp;ldquo;sketch.js&amp;rdquo; file. The P5 Web Editor starts you off with some basic code that is needed to create a blank, grey canvas.</description>
    </item>
    
    <item>
      <title>Including Tone</title>
      <link>/6_resources/4_tate-tonestuff/includingtone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/6_resources/4_tate-tonestuff/includingtone/</guid>
      <description>For Tone.js to work in your sketch you need to include it in your HTML file.
Open your project-folder and find the index.html file. Add this line under the first three script tags:
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/tone/0.11.0/Tone.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; This loads Tone.js in your sketch.</description>
    </item>
    
    <item>
      <title>Instruments</title>
      <link>/6_resources/4_tate-tonestuff/instruments/instruments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/6_resources/4_tate-tonestuff/instruments/instruments/</guid>
      <description>Types of synths Basic Synth Envelope Attack, decay, sustain, release
triggerAttackRelease
Notes and frequency Timing </description>
    </item>
    
    <item>
      <title>Lesson 1</title>
      <link>/4_physicalcomputing/1_digital_io/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/1_digital_io/1_lesson_1/</guid>
      <description>Digital Inputs Buttons</description>
    </item>
    
    <item>
      <title>Lesson 1</title>
      <link>/4_physicalcomputing/2_analog_io/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/2_analog_io/1_lesson_1/</guid>
      <description>hi</description>
    </item>
    
    <item>
      <title>Lesson 1</title>
      <link>/4_physicalcomputing/3_serialcommunication/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/3_serialcommunication/1_lesson_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measuring the Boundaries of a Shape</title>
      <link>/2_graphics/2_paintapp/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/2_paintapp/1_lesson_1/</guid>
      <description>In your projects, you&amp;rsquo;ll often want to have interactive mouse events tied to specific shapes or drawings. It&amp;rsquo;s important to remember that any shape or object drawn on the canvas can&amp;rsquo;t simply be referred to by name, since p5.js has no way of knowing the difference between a green triangle or a pink square. In order to determine whether or not a user has clicked on a 2D object, we have to use conditional statements to measure whether or not the mouse click occurred within the boundaries of that object.</description>
    </item>
    
    <item>
      <title>Samples to pick from</title>
      <link>/6_resources/4_tate-tonestuff/sample-playback-and-effects/samples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/6_resources/4_tate-tonestuff/sample-playback-and-effects/samples/</guid>
      <description>Shorter weird sounds: Popcorn maker https://s3-us-west-1.amazonaws.com/leesamples/samples/Popcorn+Maker+In+Hell.mp3 Long weird sounds: Water trickle https://s3-us-west-1.amazonaws.com/leesamples/samples/Water+Trickle.mp3 All hands on deck https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/All+Hands+On+Deck.mp3 Angry bees https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Angry+Bees.mp3 Going down https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Going+Down.mp3 Hammer it https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Hammer+It.mp3 Waves on mars https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Waves+On+Mars.mp3 Rhythmic weird sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Aqua+Beat.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Blacksmiths+Revenge.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Car+Service.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Drip+Drip+Drip.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Piston+Broke.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Morphed/Tuning+In.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Bubbles.mp3 Rhythmic loops https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/60+bpm/Ping+Pong+Ping.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/60+bpm/Throwing+Pebbles.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Bouncing+Skittles.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Bouncing+Skittles2.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Ping+Pong+Glitch.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Rhythmic+Chains.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Rhythmics/120+bpm/Scrap+Bell+Arp.mp3 Short percussive melodic sound: https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/BBQ+Lid+Hit.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Hits/Vase+Hit01.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Natural+Sounds/Truro+Cathedral+Bell+with+seagulls.mp3 Long melodic sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/SID+Arps+119bpm.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/Sun+Rising+Arp+120bpm.mp3 Short Fx sounds: https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_1.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_2.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_3.mp3 https://s3-us-west-1.amazonaws.com/leesamples/samples/fx_4.mp3 Short percussion sounds: https://s3-us-west-1.</description>
    </item>
    
    <item>
      <title>Scheduling Signals</title>
      <link>/3_audio/2_synthsandmusic/2_lesson_2/scheduling-signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/2_lesson_2/scheduling-signals/</guid>
      <description>View slidesSetting Values  This will set the value when ever you trigger it  oscillator.frequency.value; //returns the current frequency value oscillator.frequency.value = 100; //sets the value immediately  Scheduling Values  setValueAtTime - to schedule a value change at a precise time. linearRampToValueAtTime - to ramp to a value starting from the previously scheduled value. exponentialRampToValueAtTime - same as the above, but with an exponential curve instead of a linear curve.</description>
    </item>
    
    <item>
      <title>WebAudio Basics &amp; Sound File Players</title>
      <link>/3_audio/1_sampler/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/1_sampler/1_lesson_1/</guid>
      <description>View slidesUnderstanding the Audio Signal Path Creating a Sound File Player  Playing Multiple Sounds with Tone.Players Instead of making multiple single-file soundfile players, we can build one Tone.Players instrument and load it with multiple soundfiles. To define which sounds to play we create an object with multiple file paths (done by opening a pair of { } brackets inside of the Tone.Players functions parenthesis), each with a unique name to call the sound up by later.</description>
    </item>
    
    <item>
      <title>Adding Sound Events to Games: Synthesizers &amp; Sequences</title>
      <link>/3_audio/3_soundsinbugsquish/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/3_soundsinbugsquish/2_lesson_2/</guid>
      <description>Lesson goes here</description>
    </item>
    
    <item>
      <title>Audio Effects</title>
      <link>/3_audio/1_sampler/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/1_sampler/2_lesson_2/</guid>
      <description>View slidesAudio effects are used to modulate and manipulate a sound source in order to create more experimental sonic results. Let&amp;rsquo;s learn how to start incorporating effects into our web project!
Adding Audio Effects into the Signal Path In order to pass sound from our sound source into an audio effect, we need to complete the following steps:
 Build our chosen audio effect, assign it to a variable, and connect its output to the master speakers (using the .</description>
    </item>
    
    <item>
      <title>Code that is a thing - Objects with class</title>
      <link>/1_introtocoding/3_reuseitwithmodularcode/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/3_reuseitwithmodularcode/2_lesson_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Color and Transparency</title>
      <link>/2_graphics/1_proceduraldrawing/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/1_proceduraldrawing/2_lesson_2/</guid>
      <description>Working with Color in p5.js There are a number of ways to set the color of objects, shapes, backgrounds, and outlines in p5.js. With the exception of stroke outlines (which uses the stroke() function) and canvas backgrounds (which uses the background() function), we will use the fill() function to add color to things that we draw.
The fill()function works like a paint can resting on top of a ladder: when it tips over, it will change the color of everything below it.</description>
    </item>
    
    <item>
      <title>Coordinates and the Canvas</title>
      <link>/1_introtocoding/1_codingbasics/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/2_lesson_2/</guid>
      <description>The canvas in p5 is the area that you can see on your screen, and is displayed in the preview window to the right of the code editor. This canvas acts much like a painting canvas in the following ways:
 Whatever you want the viewer to see must be on the canvas. You can cover up something on the canvas by adding something new on top of the original object.</description>
    </item>
    
    <item>
      <title>Envelopes</title>
      <link>/3_audio/2_synthsandmusic/1_lesson_1/envelopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/1_lesson_1/envelopes/</guid>
      <description>Enevelopes  Tone example   ADSR  Attack time is the time taken for initial run-up of level from nil to peak, beginning when the key is first pressed. Decay time is the time taken for the subsequent run down from the attack level to the designated sustain level. Sustain level is the level during the main sequence of the sound&amp;rsquo;s duration, until the key is released. Release time is the time taken for the level to decay from the sustain level to zero after the key is released.</description>
    </item>
    
    <item>
      <title>Higher level sequencers</title>
      <link>/3_audio/2_synthsandmusic/2_lesson_2/higherlevelsequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/2_lesson_2/higherlevelsequences/</guid>
      <description>Event  abstracts away Tone.Transport.schedule and provides a schedulable callback for a single or repeatable events along the timeline loop  true of false   loopEnd loopStart mute  won&amp;rsquo;t fire if mute is true      playbackRate  interval if looped   probability  add randomness to note triggered probability   progress  where are we in the loop?      https://codepen.</description>
    </item>
    
    <item>
      <title>Lesson 2</title>
      <link>/4_physicalcomputing/1_digital_io/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/1_digital_io/2_lesson_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lesson 2</title>
      <link>/4_physicalcomputing/2_analog_io/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/2_analog_io/2_lesson_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lesson 2</title>
      <link>/4_physicalcomputing/3_serialcommunication/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/3_serialcommunication/2_lesson_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Making Groups and Lists - Arrays</title>
      <link>/1_introtocoding/2_makingthings_happen/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/2_makingthings_happen/2_lesson_2/</guid>
      <description>Variables are great for adding updatable values into our code, but they also have their limitations. One major limitation is that variables can only be assigned one value at a time. Reassigning a new value to a variable removes the previous value from the computer&amp;rsquo;s memory, and we would need additional lines of code in order to return that variable back to its previous state.
Take a look at the following code embedded below to see how the limitations of variables can end up leading to a code that looks more complex than it actually is:</description>
    </item>
    
    <item>
      <title>Moving Sprites Around the Canvas</title>
      <link>/2_graphics/3_bugsquish/1_lesson_1/moving-sprites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/3_bugsquish/1_lesson_1/moving-sprites/</guid>
      <description>Samples</description>
    </item>
    
    <item>
      <title>Nested Conditionals &amp; Complex Boundary Measurement</title>
      <link>/2_graphics/2_paintapp/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/2_paintapp/2_lesson_2/</guid>
      <description>In our last lesson, you may have noticed that our conditional tests looked a little repetitive. When measuring shapes that have multiple boundaries on the same X or Y coordinate, we can save ourselves the hassle of repeating portions of a test by using Nested Conditionals. Lets take a look at a diagram demonstrating the logic of a Nested Conditional to refresh our memories from Unit 1:
graph TD H{Outer Test}-.</description>
    </item>
    
    <item>
      <title>Collisions</title>
      <link>/2_graphics/3_bugsquish/3_lesson_3/another-bugsquish-lesson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/3_bugsquish/3_lesson_3/another-bugsquish-lesson/</guid>
      <description>Understanding Collisions Example codes for collisions
Adding to a Sprite Group on Collision
Removing from a Sprite Group on Collision</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>/3_audio/2_synthsandmusic/1_lesson_1/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/1_lesson_1/filters/</guid>
      <description>Filters  A filter modifies a source sound by either amplifying or attenuating certain frequency ranges of that sound.   Filter types can include:  lowpass highpass bandpass lowshelf highshelf notch allpass peaking  </description>
    </item>
    
    <item>
      <title>Graphics Assignment # 1 - Recreate Four Images</title>
      <link>/2_graphics/1_proceduraldrawing/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/1_proceduraldrawing/3_lesson_3/</guid>
      <description>Use the skills you&amp;rsquo;ve learned in this chapter to recreate the following four images:</description>
    </item>
    
    <item>
      <title>Graphics Assignment # 2 - Paint App</title>
      <link>/2_graphics/2_paintapp/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/2_paintapp/3_lesson_3/</guid>
      <description>Below is an example of the Paint app assignment. Play around with it and notice the following things that are required for your project:
 Number and location of color squares What happens when you clock on the color squares What happens when you click and drag the mouse What happens when you click on the white square  </description>
    </item>
    
    <item>
      <title>PC Assignment # 1</title>
      <link>/4_physicalcomputing/1_digital_io/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/1_digital_io/3_lesson_3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PC Assignment # 2 </title>
      <link>/4_physicalcomputing/2_analog_io/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/2_analog_io/3_lesson_3/</guid>
      <description>Assignment # 2</description>
    </item>
    
    <item>
      <title>Physical Computing Assignment # 3 - Adding Physical Contol to Bug Squish game</title>
      <link>/4_physicalcomputing/3_serialcommunication/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/4_physicalcomputing/3_serialcommunication/3_lesson_3/</guid>
      <description>Here is an example of this completed assignment</description>
    </item>
    
    <item>
      <title>Playing Samples</title>
      <link>/6_resources/4_tate-tonestuff/sample-playback-and-effects/playingsamples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/6_resources/4_tate-tonestuff/sample-playback-and-effects/playingsamples/</guid>
      <description>To play samples use with a new Tone.Player for one sound or a new Tone.Players for multiple sounds.
Tone.Player Play one sound This is an example of playing one sound with a Tone.Player object and triggering it to start with a mouseIsPressed function.
The variable baseURL stores the beginning part of the URL which is the same for all of our sound files. We use this variable to make our code shorter and more readable.</description>
    </item>
    
    <item>
      <title>Sound Assignment # 1 - Multiplayer with Effects and Controls</title>
      <link>/3_audio/1_sampler/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/1_sampler/3_lesson_3/</guid>
      <description>Here is an example of a solution for Sound Assignment # 1.</description>
    </item>
    
    <item>
      <title>Sound Assignment # 2 - Multiple Synthesizers, Multiple Sequences</title>
      <link>/3_audio/2_synthsandmusic/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/3_lesson_3/</guid>
      <description>Sound Assignment # 2 Result</description>
    </item>
    
    <item>
      <title>Sound Assignment #3 - Adding Sound Events to BugSquish!</title>
      <link>/3_audio/3_soundsinbugsquish/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/3_soundsinbugsquish/3_lesson_3/</guid>
      <description>Result code goes here</description>
    </item>
    
    <item>
      <title>Sound effects with sequencing examples</title>
      <link>/3_audio/2_synthsandmusic/2_lesson_2/sound-effects-sequencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/2_lesson_2/sound-effects-sequencing/</guid>
      <description>View slides Bubbles with sound   See HackPact for inspiration   Sound Effect  Massive impact starter Rain on a tin roof starter
 Sirens starter</description>
    </item>
    
    <item>
      <title>Storing Things in Code - Variables</title>
      <link>/1_introtocoding/1_codingbasics/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/3_lesson_3/</guid>
      <description>So far, our code has used concrete, static data to create visuals. However, we can use updatable, changing data in order to modify our projects while they are running in order to make them more dynamic. To do this, we use variables. A variable is a container that stores a single value in the memory or our code so that we can use it at a later time, in multiple places throughout our code.</description>
    </item>
    
    <item>
      <title>Adding effects</title>
      <link>/6_resources/4_tate-tonestuff/sample-playback-and-effects/effects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/6_resources/4_tate-tonestuff/sample-playback-and-effects/effects/</guid>
      <description>Effects in Tone.js alter the sound is some way. They can effect the timbre or rhythm of the sound.
Making connections  toMaster()  sends the sound directly to your speakers if you are missing toMaster() you will not hear anything   connect()  Sends the sound to an effect before it goes to the master    Every effect has a range that the effect can be applied to the sound, also called its wet value.</description>
    </item>
    
    <item>
      <title>Animations &amp; Images</title>
      <link>/2_graphics/3_bugsquish/2_lesson_2/animations-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/3_bugsquish/2_lesson_2/animations-images/</guid>
      <description>Adding files into a P5 project The first thing we have to do before adding an image to our sprite is to include it inside of P5. This can be done in two different ways, but they function almost identically.
  Looking at the examplel on the previous page, we can see the photoDirectory varible contains a string for a URL. This is the location on the internet where the photos are located.</description>
    </item>
    
    <item>
      <title>Everything is a number - Math</title>
      <link>/1_introtocoding/1_codingbasics/4_lesson_4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/4_lesson_4/</guid>
      <description>Adding mathematical calculations to our code allows us to create projects that intelligently adapt to changes and change on their own. We can also use math equations to create basic animations and cycles of change for any element in our project.
Many of the same mathematical operators that we commonly encounter in the world are used in JavaScript, but there are some exceptions. Here is a quick chart of common math operations and their equivalent symbols in JavaScript:</description>
    </item>
    
    <item>
      <title>Noise</title>
      <link>/3_audio/2_synthsandmusic/1_lesson_1/noise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/1_lesson_1/noise/</guid>
      <description>Noise  Tone.Noise produces different colors of noise. Each has a different sound, covers a different frequency range, and is used for different purposes. There are other colors of noise that tone doesn&amp;rsquo;t implement that are good to know about.   Most often used types  white brown pink   click left arrow for noise starter</description>
    </item>
    
    <item>
      <title>User-Based Interactivity (Mouse/Keyboard Events)</title>
      <link>/2_graphics/3_bugsquish/3_lesson_3/user-based-interactivity-mouse-keyboard-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2_graphics/3_bugsquish/3_lesson_3/user-based-interactivity-mouse-keyboard-events/</guid>
      <description>Bringing it All Together Here is an example of an advanced game that features animations, movement through key and mouse interaction, and collisions between groups and single sprite characters:</description>
    </item>
    
    <item>
      <title>Chapter 1 Review &amp; Assignments</title>
      <link>/1_introtocoding/1_codingbasics/5_lesson_5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/5_lesson_5/</guid>
      <description>Chapter 1 Review </description>
    </item>
    
    <item>
      <title>Rhythm and tuning</title>
      <link>/3_audio/2_synthsandmusic/2_lesson_2/rhythm-and-tuning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/2_lesson_2/rhythm-and-tuning/</guid>
      <description>View slidesTone-rhythm source
 how do you match a rhythm and pitch array together?  const mariaDurations = [&#39;8n&#39;, &#39;8n&#39;, [&#39;2n&#39;, &#39;4n&#39;], &#39;8n&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;8n&#39;, [&#39;2n&#39;, &#39;4n&#39;], &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, [&#39;4n&#39;, &#39;8n&#39;], &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;4n&#39;, &#39;4n&#39;, [&#39;2n&#39;, &#39;4n&#39;, &#39;8n&#39;], &#39;8n&#39;, &#39;8n&#39;, [&#39;2n&#39;, &#39;4n&#39;], &#39;8n&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;4t&#39;, &#39;8n&#39;, [&#39;2n&#39;, &#39;4n&#39;], &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, [&#39;4n&#39;, &#39;8n&#39;], &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;8n&#39;, &#39;4n&#39;, &#39;4n&#39;, [&#39;2n&#39;, &#39;4n&#39;, &#39;8n&#39;]]; const mariaPitches = [&amp;quot;Eb4&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;Eb4&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;C5&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;C5&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;G4&amp;quot;, &amp;quot;F4&amp;quot;, &amp;quot;Eb4&amp;quot;, &amp;quot;F4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;Ab4&amp;quot;, &amp;quot;G4&amp;quot;, &amp;quot;F4&amp;quot;, &amp;quot;Eb4&amp;quot;, &amp;quot;F4&amp;quot;, &amp;quot;Eb4&amp;quot;, &amp;quot;G4&amp;quot;, &amp;quot;Eb4&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;Eb4&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;C5&amp;quot;, &amp;quot;A4&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;C5&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;Eb5&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;C5&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;Eb5&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;C5&amp;quot;, &amp;quot;Bb4&amp;quot;, &amp;quot;D5&amp;quot;, &amp;quot;Eb5&amp;quot;, &amp;quot;F5&amp;quot;];  option 1 - manually  {&amp;quot;time&amp;quot; : 0, &amp;quot;note&amp;quot; : &amp;quot;C3&amp;quot;, &amp;quot;velocity&amp;quot;: 0.</description>
    </item>
    
    <item>
      <title>Sprites Images &amp; Sprite Sheets</title>
      <link>/6_resources/4_p5anddrawing/sprites-images-sprite-sheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/6_resources/4_p5anddrawing/sprites-images-sprite-sheets/</guid>
      <description>Cutting a Sprite Sheet Here is a link to an online tool for cutting out individual animation frames from a Sprite Sheet:
 https://ezgif.com/sprite-cutter  </description>
    </item>
    
    <item>
      <title>LFOs</title>
      <link>/3_audio/2_synthsandmusic/1_lesson_1/lfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/1_lesson_1/lfo/</guid>
      <description>LFO (Low Frequency Oscillator) starter</description>
    </item>
    
    <item>
      <title>Synthesizer tour</title>
      <link>/3_audio/2_synthsandmusic/1_lesson_1/synth-tour/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/3_audio/2_synthsandmusic/1_lesson_1/synth-tour/</guid>
      <description>View slidesGetting presets presets
Simple Synths Synth Preset - Alien Synth   type
 fatsine4  prefix the basic types with “fm”, “am”, or “fat” to use the FMOscillator, AMOscillator or FatOscillator types. sine, square, triangle, or sawtooth. number of partials      from FatOscillator docs
 docs count  number of detuned oscillators   spread  detune spread between oscillators   The effect of modulation here is timbral not control    Example  Preset - Steelpan  type fatcustom  osc type + custom partials partials represented as an array each number is the gain of a partial      PolySynth  Make any synth polyphonic play more than one note at a time!</description>
    </item>
    
    <item>
      <title></title>
      <link>/cool-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cool-test/</guid>
      <description>test test Unit 3 Overview:
This unit aims at introducing students to the engineering design process and involving them in creative problem solving.
Expected Lesson Duration:
210 to 270 minutes
Next Generation Science Standard(s) Addressed:
Outcomes/Objectives:
Learn how design impacts product performance.Understand the difference in an innovation and an invention
Identify and describe the parts of the engineering design process.
Use the engineering design process to solve the problem.Employ the use of data collection and analysis to help solve the problem</description>
    </item>
    
    <item>
      <title>test</title>
      <link>/iframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/iframe/</guid>
      <description>test</description>
    </item>
    
  </channel>
</rss>