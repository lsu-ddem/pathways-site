<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Basics on Educational material for LSU Programming Digital Media</title>
    <link>/1_introtocoding/1_codingbasics/</link>
    <description>Recent content in Coding Basics on Educational material for LSU Programming Digital Media</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/1_introtocoding/1_codingbasics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>/1_introtocoding/1_codingbasics/1_lesson_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/1_lesson_1/</guid>
      <description>Let&amp;rsquo;s get started! In this first example, we&amp;rsquo;ll cover the basics of text-based coding in the JavaScript language.
Head to the P5.js Web Editor, sign up for a personal account, and open a new File. You&amp;rsquo;ll be presented with a new editor window that displays the code found in your &amp;ldquo;sketch.js&amp;rdquo; file. The P5 Web Editor starts you off with some basic code that is needed to create a blank, grey canvas.</description>
    </item>
    
    <item>
      <title>Coordinates and the Canvas</title>
      <link>/1_introtocoding/1_codingbasics/2_lesson_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/2_lesson_2/</guid>
      <description>The canvas in p5 is the area that you can see on your screen, and is displayed in the preview window to the right of the code editor. This canvas acts much like a painting canvas in the following ways:
 Whatever you want the viewer to see must be on the canvas. You can cover up something on the canvas by adding something new on top of the original object.</description>
    </item>
    
    <item>
      <title>Storing Things in Code - Variables</title>
      <link>/1_introtocoding/1_codingbasics/3_lesson_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/3_lesson_3/</guid>
      <description>So far, our code has used concrete, static data to create visuals. However, we can use updatable, changing data in order to modify our projects while they are running in order to make them more dynamic. To do this, we use variables. A variable is a container that stores a single value in the memory or our code so that we can use it at a later time, in multiple places throughout our code.</description>
    </item>
    
    <item>
      <title>Everything is a number - Math</title>
      <link>/1_introtocoding/1_codingbasics/4_lesson_4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/4_lesson_4/</guid>
      <description>Adding mathematical calculations to our code allows us to create projects that intelligently adapt to changes and change on their own. We can also use math equations to create basic animations and cycles of change for any element in our project.
Many of the same mathematical operators that we commonly encounter in the world are used in JavaScript, but there are some exceptions. Here is a quick chart of common math operations and their equivalent symbols in JavaScript:</description>
    </item>
    
    <item>
      <title>Chapter 1 Review &amp; Assignments</title>
      <link>/1_introtocoding/1_codingbasics/5_lesson_5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1_introtocoding/1_codingbasics/5_lesson_5/</guid>
      <description>Chapter 1 Review </description>
    </item>
    
  </channel>
</rss>